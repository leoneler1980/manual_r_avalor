[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Manual de introducción a R",
    "section": "",
    "text": "1 Introducción\n\n1.0.1 Consideraciones y recomendaciones de como mejorar el autoaprendizaje en R (¡y en otra herramienta similar!)\nEste manual es muy específico para el entrenamiento de análisis de datos en salud, tanto para el nivel básico como intermedio, y tiene como propósito introducir el uso de R para ayudarte a facilitar el proceso de desarrollo de tus productos de investigación. Con esto dicho, hay temas que bien pudieran estar contenidos en un documento como este, pero por lo específicos que son, no aparecen detallados en este manual; por ejemplo, no abordaremos conceptos estadísticos básicos como las medidas de tendencia central, por tanto, partimos del supuesto de que ya tienes cierta familiaridad con estos temas.\nEl enfoque principal es que puedas comenzar a usar R, primero adaptándote al formato de comandos en vez del formato orientado a objetos, (que es la manera como aprendiste Excel o SPSS) y luego haciendo las tareas más comunes que se realizan rutinariamente tanto en el entrenamiento como en la práctica, es decir, hacer tablas, gráficos, exportar reportes, etc.; todo esto a un nivel introductorio.\nEl mundo de R es bien grande, (¡y qué bueno que es así!) y al principio pudiera ser tedioso para ti aprender a usarlo, sin embargo, desde que se comiences a producir resultados, notarás lo rápido que avanzarás. Una de las razones por las que R es una solución muy robusta para el análisis de grandes volúmenes de datos y para la elaboración de reportes, es que hay una comunidad muy vasta de personas que van aportando sus conocimientos y experiencia para hacer más fácil el aprendizaje y el uso de R.\nEn nuestros inicios, antes de ser instructores, fueron muchos intentos de ensayo y error, es decir, era agotador buscar en la web, “googlear” operaciones bien básicas del tipo “Cómo importar una base de datos de Excel a R”, o “Como hacer una tabla 2x2 en R”, o “Cómo calcular la diferencia en días de una misma columna de una variable fecha en un dataframe” (esta última en Excel es bien fácil, pero cuando hay que hacerlo con una base de datos bien grande, Excel colapsa mientras que con R es más rápido); otra tarea de apoyo en nuestros inicios era leer tutoriales, aplicarlos, obtener resultados erróneos, corregir, preguntar… en fin, dar muchas vueltas hasta dar con lo que andábamos buscando.\nEste tipo de esfuerzos en la actualidad es muy diferente actualmente debido al uso de la inteligencia artificial como una plataforma que provee facilidades para avanzar rápido con el aprendizaje de cualquier lenguaje informático. Lo que ha sido un común denominador es que siempre hay respuestas, y muchas, de cómo hacerlo de diferentes formas, cualquier cosa (¡Relacionada al análisis de datos!). En pocas palabras, cualquier problema o tarea que quieras hacer en R es muy probable que ya alguien la haya hecho.\nEste manual es un ejemplo de eso, pues aprendimos a usar este lenguaje que literalmente es difícil, sin embargo, lo hemos simplificado para ti, ayudándote a reducir considerablemente el tiempo de búsqueda en tutoriales y Chat GPT, combinando el lenguaje de R y el lenguaje clínico. Lo más interesante de aprender a usar R con este estilo de ensayo y error es que aprendimos cosas que no teníamos la menor idea de que existían, por ejemplo, la teoría de los colores, la gramática de los gráficos, ejercicios estadísticos que pensábamos eran imposibles hacer en R, sin embargo, por la cantidad de tutoriales, ayudas, videos, cursos (la gran mayoría gratuitos o de muy bajo costo), hemos tenido la oportunidad de aprender más allá de lo esperado y te lo traemos resumido y bajo una metodología práctica, para que puedas aplicarlo de inmediato en tus tareas cotidianas.\nDe una forma u otra, el mundo de R representa un gran avance donde converge la tecnología y la buena voluntad de muchas personas, sin fines de lucro, que realmente creen en el crecimiento social a través de la información; por herramientas como R se ha popularizado el uso de la ciencia de datos, que es muy usada en muchas profesiones incluyendo la epidemiología, y ha facilitado mucho el proceso de difundir información, como las publicaciones de artículos. Entonces, como parte de la experiencia de comenzar a usar R es el autoaprendizaje, te invitamos como primera tarea o ejercicio a que “busques” qué es R, quiénes lo crearon, para qué lo crearon, y haciendo esta actividad te vas a dar cuenta lo mencionado en las líneas anteriores sobre la vasta cantidad de información disponible en cuanto al uso de R para la gestión de datos.\nPor último, el ingrediente principal para aprender este lenguaje es tener en qué usarlo, es decir, una necesidad, en este caso, sobre procesamiento, análisis y reporte de datos. Esperamos que te motives a implementar esta herramienta y que te sea de provecho este manual, para que puedas seguir aprendiendo más de lo que esperas aprender durante este curso.\n\n\n1.0.2 Definiciones claves\n\nObjetos: Son elementos que almacenan información y pueden ser de diferentes tipos como un valor simple (numérico o caracter), un dataframe, un vector, una función, una lista, gráficos entre otros. De forma abstracta un objeto es un contenedor que puede almacenar uno o varios elementos. Estos se “almacenan” en el ambiente de trabajo que reside en la memoria de la PC. Los objetos se crean usando el operador de asignación “&lt;-” o signo “=”.\nDataframe: Es el equivalente a una base de datos en formato de tabla o listado, donde cada columna es una variable y cada fila es una observación.\nVector: Un vector es un objeto que consiste una lista de elementos que son del mismo tipo.\nRutina: Es un conjunto de comandos o códigos que cumplen con una tarea en específico, ejemplo la importación de una base de datos y su limpieza (en inglés se le dice script)\nPaquete: Son varios archivos que contienen funciones, documentación, bases de datos. Son fundamentales para añadir funcionalidad a R. También es la vía como se comparte códigos re-producibles (funciones). A modo de analogía un paquete vendría siendo una herramienta (destornillador, martillo) y R sería la mesa de trabajo, donde cada vez que necesitas una herramienta (paquete) la traes a la mesa de trabajo.\nProyecto: “Un proyecto es una carpeta de trabajo designado con un archivo .RProj. Al abrir un proyecto (usando Archivo -&gt; Abrir proyecto en RStudio o haciendo doble clic en el archivo .Rproj fuera de R), la carpeta de trabajo se establecerá automáticamente en el directorio donde se encuentra el archivo .RProj.\nBases de datos en diferentes formatos, preferiblemente en .csv, pero en Excel u otros formatos comunes se pueden trabajar)\nOperadores : Según en el libro de R para principiantes de Juan Bosco Mendoza (vega?): “Son los símbolos que le indican a R que debe realizar una tarea. Combinando datos y operadores es que logramos que R haga su trabajo. Existen operadores específicos para cada tipo de tarea. Los tipos de operadores principales son los siguientes: Aritméticos, Relacionales, Lógicos y De asignación.”\nExpresión: En programación, una expresión es una combinación de constantes, variables o funciones, que es interpretada de acuerdo a las normas particulares de precedencia y asociación para un lenguaje de programación en particular.\nCódigo: son los signos y símbolos que tienen un significado o en sus diferentes combinaciones se pueden interpretar como un lenguaje\nFunción: es un bloque de código reutilizable que realiza una tarea específica, tomando argumentos como entrada y devolviendo un resultado, lo que facilita la organización y reutilización del código.\nArgumento: es un valor o variable que se pasa a una función para que la función pueda realizar su tarea específica\nVariable: es un nombre que se le asigna a un valor o objeto, que puede ser de diferentes tipos (números, texto, etc.) y que se almacena en la memoria de la computadora.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción</span>"
    ]
  },
  {
    "objectID": "01-instalacionR.html",
    "href": "01-instalacionR.html",
    "title": "2  Preparación del ambiente de trabajo",
    "section": "",
    "text": "2.1 Como se instala R y Rstudio®\nEl primer paso para esta tarea es descargar el programa R, que se encuentra en la página web https://cran.r-project.org/ . en esta hay varias versiones dependiendo que sistema operativo estás usando, ya sea Windows, macOS o Linux.\nLuego de descargarlo puedes instalarlo inmediatamente usando el ejecutable (para Windows y macOS) o la forma como se instalan software in Linux. Para este manual estamos en un ambiente de Windows, luego de instalar podemos acceder a la consola de R (una pantalla con un cursor parpadeando donde podemos escribir)\nAunque ya hayamos instalado R, al menos que seamos muy expertos en su uso, que conozcamos bien las sintaxis de las funciones, que objetos (más tarde veremos lo que son los objetos) están cargados en la memoria, entre otras cosas (¡también se puede usar como una simple calculadora!), es muy complicado usar solamente la consola, por lo que tenemos disponible aditamentos o accesorios que nos permiten trabajar más fácil con R, así como su aprendizaje. Para este manual el aditamento que usaremos es Rstudio de Posit®.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Preparación del ambiente de trabajo</span>"
    ]
  },
  {
    "objectID": "01-instalacionR.html#como-se-instala-r-y-rstudio",
    "href": "01-instalacionR.html#como-se-instala-r-y-rstudio",
    "title": "2  Preparación del ambiente de trabajo",
    "section": "",
    "text": "En esta página trata de descargar la versión más actualizada\n\n\n\n\n\n\nEste es la consola de R, aquí podemos comenzar a usar R, pero es un poco complejo usar solamente la consola\n\n\n\n\n2.1.1 Descargar e instalar Rstudio\nAhora vamos a instalar Rstudio, para esto vamos a descargarlo de la siguiente página web, Descarga de Rstudio donde vamos a buscar la versión gratuita de escritorio para para el sistema operativo que estamos usando.\nEn caso de que estés usando Linux, están las instrucciones en la página de como hacerlo, la versión de Windows y macOS es un ejecutable.\nLuego de descargar la ultima versión disponible procedemos a instalar Rstudio, haciendo clic en el ejecutable, la instalación (en la versión de Windows por ejemplo) es muy similar a cualquier otro software que donde te pregunta el lugar donde será instalado y varias ventanas donde se ve el progreso de instalación. Si todo salió bien, es decir que se instaló sin errores, pues tendremos disponible en la barra de acceso directo y en el escritorio, (si elegimos esta opción durante la instalación) también tendremos un acceso directo.\nSi tienes Windows, te compartimos el paso a paso en este video para descargar e instalar R y también R Studio Desktop.\n\n\n\nEn Windows, la barra de inicio o las aplicaciones y si se creó el acceso directo (derecha) en el escritorio\n\n\nOtro software que se debe instalar si el sistema operativo que usas es Windows es rtools, dado que algunos paquetes necesitan que esté instalado para funcionar de forma correcta.\nEste se adquiere desde la página de Descarga rtools y elige la versión más reciente y descarga el formato ejecutable (termina en “installer”) en cualquier unidad de almacenamiento. Su instalación sencilla, solo ejecutar el programa y hacer clic en siguiente las veces que sea necesario.\n\n\n\nBusca esta version señalada en la imagen",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Preparación del ambiente de trabajo</span>"
    ]
  },
  {
    "objectID": "01-instalacionR.html#interfaz-de-rstudio",
    "href": "01-instalacionR.html#interfaz-de-rstudio",
    "title": "2  Preparación del ambiente de trabajo",
    "section": "2.2 Interfaz de Rstudio®",
    "text": "2.2 Interfaz de Rstudio®\nPara facilitar el aprendizaje y uso de R, vamos a usar RStudio que es un entorno de desarrollo integrado o IDE (Integrated Development Environment) y tiene la gran ventaja de que hay mucha documentación sobre su uso, es muy cómoda de trabajar porque nos ayuda con la escritura de los códigos, la organización de los archivos, tiene varios visores o paneles para ver los códigos, las salidas, los objetos cargados y otras ayudas más (Figura 5). RStudio ha permitido la difusión del uso de R, lo que ha permitido la propagación de su uso en todas las áreas donde se hace análisis de datos.\n\n\n\nEn esta imagen podemos ver los 4 paneles principales y el menú de la interfaz de Rstudio\n\n\n\nPanel de las rutinas: este panel es el editor de texto donde vamos a escribir los códigos (rutinas) que vamos a usar para nuestras tareas, como las tablas, los gráficos, etc., que son automáticamente ejecutadas en la consola de R. Cada rutina se puede guardar como un archivo (muy similar a un archivo de texto normal), la característica más importante de este panel es que nos permite ver si el código tiene errores, pues a veces la falta de una simple coma o un caracter nos arroja error cuando ejecutamos comandos. También nos ofrece la herramienta de autocompletar y nos facilita mucho la organización del código. Para ejecutar una línea de código simplemente ponemos el cursor al inicio o al final de la línea y presionamos Ctrl+Enter o en el botón “run”, mientras que para ejecutar la rutina completa, hacemos clic en el botón “source”. Más adelante veremos varios ejemplos.\nPanel del ambiente de trabajo o panel de objetos cargados: en este panel podemos ver cuales objetos tenemos cargados en la memoria del sistema, y nos permite ver qué tipo de objeto es (si es un dataframe, un vector, una matriz, una función, una lista). Esto nos ayuda a seguir el trabajo que vamos realizando, por ejemplo, cuando cargamos una base de datos desde un archivo de Excel en un objeto dataframe podemos ver cuantas filas y variables tiene el archivo. También a través de este panel podemos salvar la sesión de trabajo, esto es útil cuando hacemos una pausa y queremos retomar más adelante lo que estábamos haciendo.\nConsola de R: este es el lugar donde ocurre todo, puedes directamente escribir los comandos, las funciones, etc., pero para esto tenemos el panel de las rutinas, aquí también vas a ver los mensajes de errores cuando ejecutas una rutina o un comando, y por cada línea que se escribe se presiona “enter” para ejecutar los comandos. La ventaja más grande de utilizar RStudio es que hasta en la consola te identifica si hay errores o comandos incompletos y autocompletar.\nPanel para archivos, visor de gráficos y de salidas: en este panel tenemos varias ventanas donde nos permite ver los archivos disponibles (muy parecido al explorador de Windows o a la carpeta de Documentos de tu computadora). A través del menú de este panel podemos crear carpetas, borrar, mover o copiar archivos, también podemos definir el directorio de trabajo (vamos a ver más adelante en detalle qué es el directorio o lugar de trabajo), a la derecha de Archivos o Files está el visor de gráficos (Plots), que podemos ampliar y poder copiar el gráfico que se está presentando y más a la derecha está el visor de salidas (Viewer), como tablas y datos en formato HTML. También en este panel está la ventana para instalar paquetes (término muy importante que lo veremos más adelante) y la ventana de ayuda (Figura 6).\n\n\n\nFigura 6.\n\n\n\nAntes de comenzar a trabajar puedes ir familiarizándote con esta interface. En RStudio hay muchas opciones que iremos explicando en la medida que vayamos avanzando, mientras tanto, te mostrados dos herramientas interesantes del menú principal de RStudio: Tools y Help.\nSi vas al menú principal de RStudio, puedes entrar en la sección que dice “Tools” y dentro del menú desplegable seleccionas la opción de “Global Options” (al final del menú desplegable), allí encontrarás un menú, y dentro de “Appearance” está la opción “Editor theme” donde podrás cambiar los colores y el tipo de letra de las ventanas, así podrás para adaptar el ambiente a tu gusto. En Ayuda (Help) puedes encontrar los accesos directos para usar el teclado, por ejemplo, salvar la rutina en la que estás trabajando, reiniciar R, ejecutar toda la rutina, entre otros atajos. En la Figura 7 te mostramos cómo llegar a cada una de estas herramientas.\n\n\n\nFigura 7. Seleccionar “Tool” luego “Global Options” y en ayuda, buscar los atajos del teclado",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Preparación del ambiente de trabajo</span>"
    ]
  },
  {
    "objectID": "01-instalacionR.html#instalación-de-paquetes-librerías-de-funciones",
    "href": "01-instalacionR.html#instalación-de-paquetes-librerías-de-funciones",
    "title": "2  Preparación del ambiente de trabajo",
    "section": "2.3 Instalación de Paquetes (librerías de funciones)",
    "text": "2.3 Instalación de Paquetes (librerías de funciones)\nLos paquetes son extensiones para añadir más funcionalidades a R. Es quizás la razón por la cual R es ahora mismo una de las mejores herramientas para trabajar con datos dada la cantidad de paquetes específicos para realizar tareas como hacer tablas por ejemplo. En la literatura, los paquetes se identifican con { }, ejemplo: {tidyverse} y los logos son una figura dentro de un hexágono.\nCon respecto a la instalación de paquetes, usualmente estos deben estar publicados en CRAN (Aquí el enlace) y se instalan desde el panel de paquetes (“Packages”).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Preparación del ambiente de trabajo</span>"
    ]
  },
  {
    "objectID": "01-instalacionR.html#como-instalar-y-cargar-un-paquete-en-r",
    "href": "01-instalacionR.html#como-instalar-y-cargar-un-paquete-en-r",
    "title": "2  Preparación del ambiente de trabajo",
    "section": "2.4 Como instalar y cargar un paquete en R",
    "text": "2.4 Como instalar y cargar un paquete en R\nDespués de instalar R, Rstudio solo tenemos las funcionalidades que trae R base, que nos permiten hacer muchas cosas sin tener que instalar nada más, pero podemos hacer que R sea más completo, ahora vamos a ver que es un paquete y su importancia.\nComo R es un lenguaje de programación por lo tanto podemos crear programas o conjunto de funciones y estos programas podemos exportarlos para luego usarlos más adelante.\nEstos programas o complementos aumentan la capacidad de R a través de funciones o comandos, por ejemplo, R base, no nos permite exportar directamente los resultados o salidas en formato Excel o crear tablas con formato de forma directa. Por lo tanto, los paquetes o subprogramas hacen que R sea más que solo un lenguaje de programación.\nHay paquetes creados por epidemiólogos, para epidemiólogos como el epitools (Tomas J. Aragon) (aragon2020?) o epikit (Zhian N. Kamvar)(spina2023?) que nos permiten con pocos comando o funciones hacer tareas como calcular medidas de asociación (OR, Riesgo relativo) y facilitar los análisis en epidemiología y otros paquetes que hacen las tareas de análisis de datos como son el openxlsx (Philipp Schauberger)(schauberger2023?) para manipular y crear archivos de Excel o el muy famoso y aclamado paquete tidyverse (Hadley Wickham)(wickham2023?)del cual hay este paquete hay libros escritos para el procesamiento y manejo de datos por mencionar algunos.\nLos paquetes nos permiten mejorar sobremanera nuestra productividad en general. Cada vez que iniciamos una sesión con Rstudio, en nuestras rutinas debemos cargar los paquetes que vamos a usar.\nDado que R es una plataforma colaborativa, cuando un paquete es creado pasa por un proceso de validación antes de ser publicados en el repositorio de R. Es por esto que, para su instalación debemos saber si están disponibles. Los paquetes, usualmente, después de ya ser validados, son publicados en el repositorio de R (The Comprehensive R Archive Network o CRAN) que es la página donde descargamos R. También pueden estar disponibles en otras páginas donde podemos descargarlos e instalarlos manualmente. Después de instalar un paquete solo es necesario verificar si ha sido actualizado, tal como haces con cualquier otro programa.\nUsualmente los autores de los paquetes tienen tutoriales o páginas llamadas “Vignettes” o viñetas donde podemos ver las funcionalidades y tutoriales. Por ejemplo, ejemplo ingresa en la barra de búsqueda en tu explorador estas palabras: “R package epitools”, y aparecerán muchos resultados para diferentes tareas. Sigue estos pasos para verificar si un paquete existe buscando directamente desde RStudio:\n\nIr al panel de archivos\nHacer clic en la ventana de paquetes o “Packages”\nHacer clic en “install”. Aparecerá una ventana donde escribirás el nombre del paquete. Si el paquete existe en CRAN, aparecerá en un listado y lo seleccionarás\nHacer clic en “install”.\n\n\n\n\ninstallando un paquete en Rstudio\n\n\nSi el paquete no está disponible en CRAN pero si en la web y podemos descargarlo y cambiar donde dice “install from” a “package archive file” y buscar en el disco duro y proceder a instalar (es muy raro que se de este caso y los paquetes que vamos a instalar todos están disponible en CRAN).\nLa otra forma de instalar los paquetes es directamente desde la consola o en un archivo de rutina usando el la función install.package() donde escribimos entre comillas el nombre del paquete que queremos instalar.\n\n\n\nFigura 14. En esta imagen vemos en la consola la función para instalar el paquete pacman\n\n\nLuego de esta introducción sobre qué es un paquete y cómo se instala, vamos a hacer el siguiente ejercicio de instalar varios paquetes que usaremos de forma constante en los ejercicios y tareas contenidos en este manual. Ya sea directamente en la consola (ver imagen anterior), o a través del panel de archivos, vamos a instalar este paquete “pacman” (Tyler Rinker) que es un paquete para manejar paquetes y nos ahorrará muchos pasos, por ejemplo, detecta si un paquete necesario está instalado o no, y procede a instalarlo, o ayuda a instalar paquetes desde otras fuentes alternativas a CRAN. Después de instalarlo podemos ver en la consola el mensaje de que se instaló correctamente  (package ‘pacman’ successfully unpacked and MD5 sums checked).\nEn la rutina que comenzamos hace un momento atrás vamos a hacer la siguiente tarea:\n\nEscribe o copia y pega el siguiente comando (recuerda, para ejecutar un comando o varios selecciona estos y presiona Ctrl+Enter o clic en “Run”):\n\n\npacman::p_load(\"tidyverse\", \"janitor\", \"gtsummary\", \"epikit\",\"here\",                \"epitools\", \"lubridate\", \"openxlsx\", \"readxl\", \"rio\")\n\nEspera un momento si es la primera vez que se ejecuta para que así se instalen los paquetes que están en el comando.. Antes de continuar, vamos a explicar el comando anterior:\nEn Rstudio, en el editor de rutinas o en la misma consola, cuando queremos ver las funciones o comandos disponibles en un paquete podemos escribir el nombre del paquete seguido de dos puntos nos aparecerá una ventana con un listado de dichas funciones, por ejemplo, este último comando usamos el paquete pacman y dentro de este paquete usamos la función de p_load (para cargar paquetes, que también los instala si no están ya instalados)\n\n\n\nEsta es una de las funcionalidades de Rstudio que nos facilitan el trabajo , luego de escribir el nombre del paquete y dos veces dos puntos nos aparece el listado de funciones y también una ventana amarilla para ayuda de la función presionando F1 para ver en el panel de archivos, la ventana de ayuda y así ver los ejemplos de cómo usar dicha función.\n\n\nLuego de escribir el nombre del paquete y dos veces dos puntos, nos aparece el listado de funciones y también una ventana amarilla para ayuda de la función, que también aparece presionando F1 o haciendo una búsqueda en el panel de archivos en la ventana de ayuda, donde también se pueden ver los ejemplos de cómo usar las funciones.\nLos paquetes que hemos instalado hasta este momento no los vamos a detallar por ahora, sino que, en la medida que vayamos haciendo los ejercicios, vamos a ir explicando para qué sirven a través de las funciones que traen cada uno. Es oportuno señalar que, dentro de los paquetes disponibles en R, existen paquetes útiles para facilitar el proceso de importar y exportar funciones específicas para las tareas del epidemiólogo, para hacer reportes y para facilitar el proceso de la gestión de los datos.\nPara ver que paquetes tenemos cargados podemos escribir en la consola search()\n\nsearch()\n\n [1] \".GlobalEnv\"        \"package:rio\"       \"package:readxl\"   \n [4] \"package:openxlsx\"  \"package:epitools\"  \"package:here\"     \n [7] \"package:epikit\"    \"package:gtsummary\" \"package:janitor\"  \n[10] \"package:lubridate\" \"package:forcats\"   \"package:stringr\"  \n[13] \"package:dplyr\"     \"package:purrr\"     \"package:readr\"    \n[16] \"package:tidyr\"     \"package:tibble\"    \"package:ggplot2\"  \n[19] \"package:tidyverse\" \"package:stats\"     \"package:graphics\" \n[22] \"package:grDevices\" \"package:utils\"     \"package:datasets\" \n[25] \"package:methods\"   \"Autoloads\"         \"package:base\"     \n\n\nLos dos capítulos siguientes son muy importantes. Debes familiarizarte con ellos porque son los fundamentos para poder trabajar en R, veremos ejemplos de las sintaxis de las expresiones, los diferentes tipos de objetos de datos, y a medida que vayamos practicando se irá haciendo más fácil entender el código, las funciones y las operaciones que hacemos. Te recomendamos que, aparte de este manual, abundes más sobre los temas que verás a continuación para que agilices tu proceso de aprendizaje con R.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Preparación del ambiente de trabajo</span>"
    ]
  },
  {
    "objectID": "02-comanzandousandoR.html",
    "href": "02-comanzandousandoR.html",
    "title": "3  Comenzar a trabajar con R y la interfaz de Rstudio",
    "section": "",
    "text": "3.1 Creación de un proyecto\nYa luego de tener todo lo necesario instalado, ahora vamos a realizar los siguientes pasos con la finalidad de ir aprendiendo a organizar los trabajos que estaremos haciendo, como son los productos o asignaciones que se deben hacer durante la capacitación, como son los análisis de vigilancia, análisis de brotes, evaluación de sistema de vigilancia entre otros.\nUna gran recomendación es tener lo más organizado posible cada elemento hecho en R o cualquier documento asociado a los análisis o trabajos que vas a realizar; esto porque en nuestro caso, cuando comenzamos a trabajar con RStudio guardábamos las rutinas y las salidas en diferentes lugares, como principiantes al fin, no teníamos una estructura, y luego cuando necesitábamos re-usar una rutina, buscar un documento de salida era muy difícil de encontrar y perdíamos tiempo en esa búsqueda, a veces nos tomaba más que lo que se toma ejecutar una rutina. Luego aprendimos sobre lo que vamos a ver a continuación en cuanto a trabajar bajo proyectos en RStudio.\nEl primer paso para comenzar es decidir dónde estarán los archivos relacionados al o a los trabajos que se van a hacer, es decir, debes definir si almacenarás tu trabajo en un disco dentro de la PC o en la “Nube” (ejemplo, OneDrive, Google drive) para que así siempre facilites tu trabajo, especialmente cuando necesites hacer cambios o actualizar las bases de datos.\nEsto es sumamente importante dado que nos ayudará a mantenernos organizados. Todos los archivos como las bases de datos, las referencias, las rutinas, deben estar almacenados en un lugar donde te sea fácil encontrarlos y también para la ejecución o desarrollo del proyecto o proyectos en que estés trabajando.\nPara el segundo paso vamos a entrar en RStudio y vamos a crear un archivo de proyecto de la siguiente forma:\nSi has hecho todos estos pasos y tu pantalla se parece a la imagen anterior es porque has creado un proyecto. Puede verificar el nombre del proyecto en la esquina superior derecha de la interfaz de RStudio.\nAparte de mantener una organización para mantener todo en orden, la mayor ventaja de usar proyectos es que a RStudio se le facilita encontrar dónde están los archivos que serán usados, por ejemplo, si ubicas las bases de datos correctamente, será más fácil para ti importar los datos a R y también exportar archivos a otras herramientas de análisis.\n¿Por qué en la imagen anterior falta un panel\nEn la imagen anterior solo vemos 3 ventanas porque no hemos abierto o creado una rutina, solo tenemos la consola, el panel del ambiente de trabajo y el panel de archivos.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Comenzar a trabajar con R y la interfaz de Rstudio</span>"
    ]
  },
  {
    "objectID": "02-comanzandousandoR.html#creación-de-un-proyecto",
    "href": "02-comanzandousandoR.html#creación-de-un-proyecto",
    "title": "3  Comenzar a trabajar con R y la interfaz de Rstudio",
    "section": "",
    "text": "Figura 10. Creando un proyecto\n\n\n\nCrea el proyecto llamándolo “mi_primer_proyecto” siguiendo los pasos de la Figura 10.\nGuarda el proyecto nuevo en el “escritorio” o en “Documentos” si usas Windows.\nPara crear las carpetas, en la ventana inferior derecha o panel para archivos, ve a “Archivos” o “File”, luego haz clic en “new folder” para crear las siguientes carpetas:\n\n\n\n“Base de datos” para almacenar tus datos en cualquier formato, como datos en Excel, por ejemplo.\n“Rutinas” para salvar las rutinas que irás creando.\n“Referencias” vas a poner aquí los documentos de soporte como referencias, artículos, etc.\n“Salidas”, donde vamos a salvar los documentos generados a partir de las rutinas, en esta última podemos tener una subcarpeta que se llame “imágenes” para las salidas que son imágenes, como gráficos o tablas salvadas en formato de imagen.\n\n\n\n\nAl finalizar, tu panel de archivos se tendría que ver como se muestra en la Figura 11",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Comenzar a trabajar con R y la interfaz de Rstudio</span>"
    ]
  },
  {
    "objectID": "02-comanzandousandoR.html#archivos-de-rutina-script-en-r",
    "href": "02-comanzandousandoR.html#archivos-de-rutina-script-en-r",
    "title": "3  Comenzar a trabajar con R y la interfaz de Rstudio",
    "section": "3.2 Archivos de rutina (script) en R",
    "text": "3.2 Archivos de rutina (script) en R\nSiguiendo la secuencia de pasos para comenzar a trabajar con R en Rstudio, vamos a ver uno de los elementos más importantes que son las rutinas y que la usaremos constantemente.\nHasta este punto, hemos mencionado varias veces la palabra “rutina”. Una rutina no es más que un “documento” donde escribimos comandos (funciones, cálculos, etc.), que puede ser ejecutado las veces que sea necesario (como por ejemplo procesar y generar un reporte semanal). Realmente crear una rutina es un procedimiento muy sencillo porque se trata simplemente de escribir en un editor de texto las funciones que generan los resultados que esperamos.\nDado que podemos salvar las rutinas como archivos, podemos compartirlas y guardarlas para luego usarlas como referencia.\nPara crear una nueva rutina en RStudio vamos a “file” -&gt; “new file” -&gt; “R Script” (en inglés rutina es igual a Script por lo que estaremos utilizando ambos conceptos de manera indistinta a lo largo del curso).\nDespués de aceptar ahora tenemos el panel de rutinas habilitado (igual que un editor de texto) tal como se ilustra en la Figura 12.\nCuando salves la rutina nueva por primera vez, te pedirá dónde guardar el archivo, entonces procede a guardarlo en la carpeta de “Rutinas” que previamente creaste en el Panel de archivos y ya podrás comenzar a trabajar. Es importante anotar que RStudio no salva el avance de tu rutina automáticamente, sino que siempre debes guardar cada cierto tiempo, ya sea a través del menú o utilizando el atajo Ctrl+S.\n\n\n\nFigura 12. Pasos para comenzar un archivo de rutinas o (Ctrl+Shift+N)\n\n\nSi has llegado hasta aquí, entonces ya tienes una gran parte del camino recorrido, es decir, ya tienes el programa instalado y disponible, un proyecto creado y tu primera rutina guardada. Si desde ya comenzáramos a trabajar, podemos escribir comandos directamente en la consola o en el documento de la rutina para hacer operaciones como aplicar a nuestros datos los estadísticos de tendencia central, para que vayas viendo y familiarizándote con R. Vamos a hacer la siguiente prueba paso a paso:\n\nEscribe el texto debajo en el documento de la rutina, o si estas desde tu PC, copia y pega todo este texto, selecciónalo (como en cualquier editor de texto o Ctrl+A) y presiona Ctrl+Enter o haz clic en “Run”.\n\n\nedades &lt;- c(5,6,7,10,12,40,53,35,29) #creamos un vector con 9 observaciones numericas \nmean(edades)   #promedio \nmedian(edades) #mediana \nsd(edades)     #desviación estandar \nmin(edades)    #valor minimo \nmax(edades)    #valor máximo  \n#tambien podemos hacer un resumen más acabado, con menos comandos \nsummary(edades) #esta función nos hace todos los calculos anteriores}\n\n\nLuego de ejecutar los comandos, podemos ver el resultado en la consola. Como puedes observar, está escrito lo mismo que la rutina pero debajo de cada comando hay un resultado, es decir, vas a ver el resultado de calcular el promedio a través de la función mean() cuyo resultado es 21.8, y así sucesivamente. La consoloa debería verse algo similar a esto:\n\n\nedades &lt;- c(5,6,7,10,12,40,53,35,29) #creamos un vector con 9 observaciones numericas \nmean(edades)   #promedio \n\n[1] 21.88889\n\nmedian(edades) #mediana \n\n[1] 12\n\nsd(edades)     #desviación estandar \n\n[1] 17.73728\n\nmin(edades)    #valor minimo \n\n[1] 5\n\nmax(edades)    #valor máximo  \n\n[1] 53\n\n#tambien podemos hacer un resumen más acabado, con menos comandos\nsummary(edades) #esta función nos hace todos los calculos anteriores\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   5.00    7.00   12.00   21.89   35.00   53.00 \n\n\nUna de las ventajas que tiene RStudio de trabajar con los documentos de rutina es que puedes tener varias rutinas abiertas a la misma vez y navegar entre ellas. Esto te puede resultar útil para utilizar una rutina dentro de otra, es decir, como las rutinas se pueden guardar en la PC, vas a darte cuenta de que hay muchos procedimientos que se repiten y que solo necesitas modificarlos levemente, en estos casos, mientras estás haciendo una rutina puedes usar otra como referencia para tomar códigos que ya has usado antes o que te han compartido. ¿Cuál es la ventaja de esto? ¡que no es obligatorio aprenderse todas las funciones o comandos de R!\nUna muy buena práctica es comentar todo lo que haces para luego saber qué hiciste en una secuencia de códigos. Para esto, solo tienes que comenzar una línea con el carácter “#” o signo de número, y todo el texto después de este carácter cambia de color y se pone en formato itálico, tornando el texto de color verde de forma predeterminada, aunque el color verde pudiera variar dependiendo de la configuración de colores que hayas elegido, tal como te explicamos en la sección 2.2. Cuando estemos en los pasos de hacer tablas y gráficos, vamos a usar mucho los comentarios.\nEl editor de texto de rutina en RStudio también nos permite ver si hay errores en el código, otra de las tantas funcionalidades que nos ofrece el programa para hacer más fácil la escritura de códigos.\n\n\n\n\n\nVarias rutinas abiertas (con Ctrl+shift+tab podemos movernos entre las rutinas sin usar el ratón)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Comenzar a trabajar con R y la interfaz de Rstudio</span>"
    ]
  },
  {
    "objectID": "03-operadoresR.html",
    "href": "03-operadoresR.html",
    "title": "4  Operadores en R",
    "section": "",
    "text": "Antes de continuar con los paquetes y funciones, debemos conocer algunos conceptos básicos para poder trabajar con R. Se trata de los operadores, los de uso común en matemáticas (como suma, resta, multiplicación y división), los de asignación, los booleanos, entre otros. Es bueno que sepas, si acaso no lo sabes, que todos los lenguajes de programación usan operadores.\nLos operadores son los que nos permiten escribir las expresiones que usaremos en nuestras rutinas y las funciones. En R, hay operadores que se usan constantemente para crear nuestro código.\nDesde que abres R, puedes utilizarlo como una calculadora (muy avanzada, por cierto), es decir, si escribes en la consola 2+2 y presionas Enter tendrás un resultado, pero si queremos correr varias veces esta misma operación podemos guardarla en un objeto y en vez de escribir de nuevo la operación (el 2+2) podemos simplemente llamar este objeto con solo escribirlo y vamos a obtener el mismo resultado. manejar los objetos nos agiliza mucho el trabajo.\nDentro de las funciones podemos ver si un valor o un objeto está presente, así como también reasignar un valor o hacer operaciones matemáticas. A continuación, te mostramos los operadores que utilizaremos con más frecuencia.\n\n4.0.1 Resumen de los operadores más usados para la escritura de las expresiones en R\n\n\n\n\n\n\n\n\n\nTipo\nOperador\nDescripción\nEjemplo\n\n\n\n\nAsignación\n&lt;-\nPara asignar un valor a un objeto (el signo de = es similar) se compone de “menor que” seguido de una raya o “dash”\nx &lt;- 2+2 con esto creamos (asignamos) la operación 2+2 al objeto x\nsi volvemos a usar x como objeto y le asignamos otro valor, este se sobrescribirá\n\n\nAsignación\n” ”\nLas comillas son para declarar texto, si escribes cualquier caracter entre comillas será reconocida como una cadena de caracteres\nz  &lt;- “Me gusta R” asignamos al objeto z el texto\n\n\nEvaluación\n==\nigual, igual significa Igual, para evaluar si un objeto es igual a otro o una variable es igual a un valor\nx ==4 (la respuesta es TRUE)\n\n\nEvaluación\n!=\nSignifica no es igual, para evaluar si un objeto es diferente a otro o una variable es diferente a un valor.\nx != 4 (la respuesta es FALSE)\n\n\nEvaluación\n&gt;, &lt;, &gt;=, &lt;=\nSignos para evaluar mayor que, menor que, mayor o igual que y menor o igual que, aparte de los números, estos operadores funcionan con texto, (b es menor que c por ejemplo)\nx&lt;5 (la respuesta es TRUE), x&gt;5 (la respuesta es FALSE)\nx&gt;=3 (la respuesta es TRUE)\nx&lt;=5 (la respuesta es FALSE)\n\n\nEvaluación\n%in%\nIdentifica si un elemento (como un número, por ejemplo) está dentro de un objeto (si queremos decir “no esta incluido en” solo agregamos signo de exclamación !)\n2 %in% x (la respuesta es TRUE)\n2 !%in% x (la respuesta es FALSE)\n\n\nAcceso\n$\nSigno de dinero sirve para acceder a las variables de un dataframe o una lista\nmtcars (un dataframe interno de R) tiene 11 columnas, para seleccionar o aplicar una función a una de estas (como mean para promedio) escribes el nombre del dataframe seguido del signo de dinero y el nombre de la variable así : mean(mtcars$cyl) para retornar el promedio o 6.1875\n\n\nAcceso\n[ ]\nLos corchetes son usados con los vectores, matrices y dataframe para acceder a un valor en base de una posición (para las matrices y dataframe) donde el primer valor es el numero de fila y el segundo valor es el numero de columna. Para los vectores solo se usa un valor para especificar la posción.\nusando mtcars de nuevo, si quiero saber que valor está en la fila 20 de la columna 3 puedes escribir este código mtcars[20,3] y retorna 71.1 que es el valor de la variable disp de la fila del carro toyota corolla.\n\n\nBooleano\n&\nY o AND\ny = c(1,3,4,9,11,10) #un vector con 6 elementos\n3 & 4 %in% y (la respuesta es TRUE, porque están ambos, si no es así, es FALSE )\n\n\nBooleano\n|\nO o OR\n3 | 30 %in% y (la respuesta es TRUE, porque está al menos 1 de los elementos dentro del objeto o vector y, si ambos elementos faltaran, la respuesta seria FALSE)\n\n\nAritméticos\n+, -, *, /,^, =\nSignos matemáticos para suma, resta, multiplicación, división y exponente. El igual es usado más para asignación\n2*2 retorna 4\n2+2 retorna 4\n4/2 retorna 2\nx = 2+2 (igual como asignación, otro ejemplo x=log(4),donde log() es una función que la usamos para asignar al objeto x el logaritmo de 4)\n\n\nOtros\n( )\nLos paréntesis son símbolos que se usan mucho en operaciones y funciones para determinar que ocurra algo y en el orden, siempre desde los más internos hacia los externos\nmean(c(3,4,5,6,2,5)) el resultado es 4.16, si te fijas primero tenemos un set de paréntesis que crea un objeto, luego el otro set de paréntesis que indica calcular el promedio de este grupo usando la función mean(),\n\n\nOtros\n%&gt;% o “pipe”\nEs un operador para indicar una secuencia de comandos o expresiones que se realizan a partir de un objeto en cascada, significa “entonces o luego” (vamos a ver más de su uso cuando veamos transformación de datos) se puede escribir con Ctrl+M y hay que tener instalado el paquete tidyverse\nc(3,4,5,6,2,5)%&gt;%\nmean() nos da el mismo resultado que\nmean(c(3,4,5,6,2,5)), básicamente una expresión como esta nos dice “crea un objeto de 5 numeros, Entonces (el pipe) obtén el promedio”\n\n\notros\n, (comma)\nLa coma en R se usa para asignar un espacio de un elemento o un parámetro, por ejemplo, el primer elemento luego una coma, segundo elemento y luego una coma\ny &lt;- c(“a”, “b”,”c”)\nggplot(data=df, aes(x=var1, y=var2, fill=cat1))\n\n\n\nEn la medida que vayas practicando los operadores se irán haciendo familiares y más fácil de entender. Siempre hay que tomar en cuenta que un operador mal usado dará error cuando ejecutamos un comando o código, verás que te ocurrirá a menudo dejar de escribir el último paréntesis, o cerrar comillas.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Operadores en R</span>"
    ]
  },
  {
    "objectID": "04-objetosenr.html",
    "href": "04-objetosenr.html",
    "title": "5  Objetos en R",
    "section": "",
    "text": "5.1 Vectores\nOtro elemento de suma importancia a conocer cuando se trabaja con R, así como vimos la importancia de las rutinas, son los objetos y sus diferentes tipos, dado que es con esto que trabajamos. Son básicamente los contenedores de los datos, que R los almacena en la memoria del computador, es decir, a partir de estos es que haremos nuestras salidas como tablas, gráficos, reportes a través de la transformación (declarar, nombrar, filtrar reemplazar), entre otras. Básicamente los objetos son el fundamento de todo.\nEn R, hay 5 tipos de objetos de datos y se dividen en dos grupos de objetos: los que son de un solo tipo de dato (atómicos) o los que tienen varios tipos de datos (recursivos). Empecemos con los atómicos.\nDentro de los objetos atómicos tenemos los vectores, los cuales no tienen dimensión, es decir, no están compuestos por filas o columnas como un dataframe, y pueden ser de clase numérica (entero y decimal), integer (números enteros solamente), caracter o texto, lógico (TRUE, FALSE) y factor (jerarquía en los valores). Un ejemplo de creación de un vector es el siguiente:\nPara los vectores que son de caracteres o texto, si al crearlos les ponemos números sin comillas, cuando los llamemos serán reconocidos como texto, por lo tanto, no se pueden hacer operaciones matemáticas con estos vectores aunque sean números.\nSi escribes “x” (o el nombre que hayas usado para crear el vector) y presionas Enter, en la consola observaras los elementos contenidos en este vector.\nUna de las funcionalidades más interesantes de R es que, en el caso de vectores numéricos, si haces una operación matemática como 5 + x (nombre del vector), la operación se hará en todos los elementos del vector, es decir, el 5 se sumará con cada uno de los números. Si haces esto con un vector de texto o carácter, en la consola observarás un error que es una operación entre un argumento no numérico contra otro numérico.\nA medida que avancemos con el desarrollo de los productos vamos a ver que los vectores los usamos de forma constante; un ejemplo común es crear un vector con los nombres de las provincias o municipios de interés para luego poder hacer un filtro invocando dicho vector. También se puede hacer combinando varios tipos de vectores con las mismas dimensiones, es decir, el mismo número de elementos podemos “unirlos” y formar un nuevo objeto como un dataframe o una lista.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Objetos en R</span>"
    ]
  },
  {
    "objectID": "04-objetosenr.html#matrices",
    "href": "04-objetosenr.html#matrices",
    "title": "5  Objetos en R",
    "section": "5.2 Matrices",
    "text": "5.2 Matrices\nOtro tipo de objeto atómico o que solo admite un tipo de valor es la matriz que es básicamente un vector pero con dos dimensiones (columnas y filas) se crean usando la función matrix() y se le debe agregar el parámetro del total de filas así como el total de columnas por ejemplo de la siguiente forma:\n\nNo entraremos detalles ahora con los objetos de tipo matriz porque estos objetos tienen sus usos bien específicos y no vamos a usarlos de forma constante como lo haremos con los vectores.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Objetos en R</span>"
    ]
  },
  {
    "objectID": "04-objetosenr.html#dataframes-conjunto-de-datos",
    "href": "04-objetosenr.html#dataframes-conjunto-de-datos",
    "title": "5  Objetos en R",
    "section": "5.3 Dataframes (conjunto de datos)",
    "text": "5.3 Dataframes (conjunto de datos)\nAhora vamos a ver uno de los objetos más importantes que vamos a usar, los dataframes, que es un objeto de tipo recursivo o que admite varios tipos de datos (texto, numérico, lógico) y es idéntico a una tabla, es decir, tiene dos dimensiones, columnas y filas. Las columnas se pueden ver como si fueran variables y las filas son los valores contenidos en esta variable.\nPara los trabajos que vamos a realizar, este será el tipo de objeto con el que más nos sentiremos familiarizados, dado que lo más parecido a un dataframe es una base de datos, ya sea en Excel u otro tipo de programa.\nUna de las ventajas que tiene Rstudio es que nos ayuda a ver fácilmente la estructura del objeto dataframe, cuantas variables o columnas y cuantas filas u observaciones contiene para visualizar el contenido.\n\n\n\nPanel de ambiente de trabajo en Rstudio donde podemos ver los objetos de datos disponibles, en esta imagen podemos ver dos dataframes (tab_dim_ej y tabla_resultado) y debajo, en la categoría de values, 3 vectores, (edades, x y “y”) . Rstudio nos permite diferencial rápidamente también ver los atributos de cada elemento. Para saber más sobre los tipos de objetos podemos usar dos funciones str() y class(), la primera para ver la estructura y la segunda para ver que clase de objeto es.\n\n\nPara comenzar a usar los dataframes tenemos dos formas de hacerlo. Primero, creándolo directamente escribiendo los datos que usaremos, combinando varios vectores para crear una tabla como en el siguiente ejemplo:\n\n var1 &lt;- c(\"maria\", \"pedro\", \"juan\", \"jose\") #creamos un vector con nombres por ejemplo\n var2 &lt;- c(25, 40, 30, 35) #creamos otro vector con las edades\n var3 &lt;- c(\"F\", \"M\", \"M\", \"M\") #creamos otro vector con el sexo\n var4 &lt;- c(\"LR\", \"SD\", \"SC\", \"PP\") # creamos otro vector con la procedencia\n tabla &lt;- data.frame(nombre=var1, edad=var2, sexo=var3, prov=var4)\n \ntabla\n\n  nombre edad sexo prov\n1  maria   25    F   LR\n2  pedro   40    M   SD\n3   juan   30    M   SC\n4   jose   35    M   PP\n\n\n\n\n\nAnatomía de la función data.frame() para crear un dataframe. en R las funciones vienen con valores en los parámetros de forma predeterminada, incluso no hay que escribirlos. Un ejemplo es en esta función de data.frame() el parámetro check.names=TRUE viene predeterminado y por ende no hay que escribirlo.\n\n\nEntonces si ejecutamos las líneas anteriores vamos a tener como resultado un dataframe nuevo con 4 variables y 4 observaciones. ¡Ojo! los vectores deben de tener la misma cantidad de elementos, de lo contrario, veremos el siguiente error: “Error in data.frame(nombre = var1, edad = var2, sexo = var3, prov = var4) : arguments imply differing number of rows: 4, 3”, esto significa que uno de los vectores no tiene la misma cantidad de elementos.\nPara corregir esto, si el valor es desconocido en el vector que nos falta un elemento, solo agregamos un elemento nuevo llamado NA, sin comillas, que es una forma de decirle a R que el valor es desconocido, posteriormente, ejecutamos de nuevo las líneas donde hicimos el cambio para actualizar ¡y listo!\nEste abordaje puede ser útil para tablas pequeñas, pero cuando tenemos que trabajar con bases de datos que tienen cientos o miles de observaciones, entonces creamos un dataframe importando los datos desde diferentes fuentes, como archivos de Excel, desde archivos de texto, incluso archivos nativos de otros programas estadísticos como SPSS o STATA.\nEn Rstudio podemos, sin necesidad de escribir una expresión o comando, usar el botón de “import Dataset” en el panel de ambiente de trabajo, y al hacer clic, se despliega un menú para diferentes tipos de formatos de bases de datos como Excel, csv, txt, SPSS, SAS o Stata.\n\n\n\nBotón para importar bases de datos de otras fuentes\n\n\nDespués de hacer clic en uno de los formatos, (ejemplo Excel) se abre una ventana para seleccionar el archivo de la base de datos, que variables o columnas vamos a incluir además de otros parámetros.\n\n\n\nPasos para importar un dataframe usando Rstudio\n\n\nDe forma predeterminada, en el nombre del objeto o dataframe estará el nombre del archivo de la base de datos, y puedes cambiarlo a un nombre más amigable (ejemplo bd o base). Si estás usando un archivo de Excel que contiene varias hojas, puedes especificar cual hoja usarás en “sheet”, incluso, puedes elegir el rango de filas que usarás en caso de que no quieras seleccionar la hoja completa. De igual manera, puedes poner desde cuál fila se leerá el archivo, esto es importante si la base de datos en Excel tiene títulos y los datos se comienzan a partir de la 3ra o 4ta fila, en este caso, puedes en “skip” omitir la fila o las filas que no son necesarias.\nPor último, si este proceso lo vas a usar repetidamente, debes copiar el código que está en el campo inferior derecho de la ventana y pegarlo en el panel de editor de rutinas, para que lo tengas en tu rutina, y desde ahí, puedes modificarlo de ser necesario, pues realmente este es un aditamento visual dado que Rstudio está generando un código para que no tengas que escribirlo; básicamente, está cargando el paquete readxl y usando la función de importar archivos de Excel llamada read_excel().\nOtra forma para cargar bases de datos muy parecida a la que vimos anteriormente es usando el paquete rio (input/output) y el paquete here en combinación con la función import() y la función here(), que nos ahorra escribir toda la ruta del archivo de la base de datos cuando estamos en un proyecto en Rstudio. A continuación, un ejemplo:\nLa base de datos que vamos a importar está ubicada en la carpeta de Base de datos, solo necesitamos saber el nombre del archivo que vamos a usar, en este caso, tiene el nombre de “base de datos ejemplo.xlsx”:\n\npacman::p_load(rio) #Para cargar el paquete {rio}\n\nmi_base_ejemplo &lt;- import(here(\"Bases de datos\", \"base de datos ejemplo.xlsx\"), setclass=\"tibble\")\n\nPara ver la base de datos utilizamos la función View(), con ella invocamos el visor de datos, o simplemente utilizamos la función head() para ver las primeras observaciones del dataframe en la consola. Como buena práctica, después de importar la base de datos en un dataframe, es ver su estructura para determinar si las columnas se importaron correctamente, esto podemos hacerlo viendo en el panel de ambiente de trabajo desplegando la flecha a la izquierda del nombre del dataframe o escribiendo en la consola la función str() donde vamos a ver el nombre de la variable, de qué clase es (chr si es texto, num si es numérico, logi si es lógico (true/false), int si es interger, etc.\nCuando sabemos de antemano que una variable es de tipo fecha, pero aparece como número luego de importar la base de datos, podemos transformarla a su formato original de fecha. Más adelante veremos cómo se hace.\nEn la siguiente tabla se resumen las funciones que nos servirán para revisar un dataframe. Al usarlas en la rutina, solo debemos poner el nombre del dataframe dentro de los paréntesis.\nSi vemos por ejemplo que una variable que sabemos de antemano que es una fecha está como tipo numérica, luego podemos transformarla a su tipo original. Más adelante veremos cómo se hace.\n\nFunciones que nos sirven para revisar un dataframe (solo debemos poner el nombre del dataframe dentro de los paréntesis)\n\n\n\n\n\n\nFunción\nEfecto\n\n\n\n\nhead()\nMuestra las 6 primeras filas\n\n\ntail()\nMuestra las ultimas 6 filas\n\n\ndim()\nNos muestra las dimensiones del dataframe, total de observaciones y total de columnas\n\n\nnrow()\nNos muestra el total de filas u observaciones\n\n\nncol()\nNos muestra el total de columnas\n\n\nstr()\nNos hace un resumen de la estructura del dataframe, columna por columna\n\n\nnames() o colnames()\nNos muestra los nombres de las columnas\n\n\n\nLos resultados que arrojan estas funciones podemos guardarlas en un objeto, para fines del ejemplo, lo denominaremos “vector”. Si queremos comparar el total de columnas de un dataframe vs otro (por ejemplo, cuando queremos comparar un corte de la base de datos de una fecha vs otro corte) podemos crear el vector col_dataframe_1 &lt;- ncol(dataframe1) y el vector col_dataframe_2 &lt;- ncol(dataframe2) y luego comparar: col_dataframe1 ==col_dataframe2, si tenemos el resultado TRUE, pues ambos dataframes tienen la misma cantidad de columnas, de lo contrario, uno de los dataframes tiene columnas de menos o de más.\nPor igual, si hacemos el mismo ejercicio para ver cuántas filas ha crecido una base de datos podemos usar la función nrow() y restar el vector del dataframe2 – dataframe1 para obtener la diferencia de filas.\n\nfilas_bd_1 &lt;- nrow(dataframe1)\nfilas_bd_2 &lt;- nrow(dataframe2)\n\ndiferencias_filas &lt;- filas_bd_2-filas_bd_1\n\nEsto es un ejemplo muy sencillo pero muchos procedimientos de transformación de datos usamos estas funciones.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Objetos en R</span>"
    ]
  },
  {
    "objectID": "04-objetosenr.html#listas",
    "href": "04-objetosenr.html#listas",
    "title": "5  Objetos en R",
    "section": "5.4 Listas",
    "text": "5.4 Listas\nOtro tipo de objeto que usa R son las listas, que es un tipo de objeto recursivo o que admite diferentes formatos de elementos. Las listas básicamente son objetos que combinan varios objetos que pueden ser matrices, vectores, dataframes, sin restricciones. En resumen, las listas son mini contenedores, y se usan mucho para las funciones cuando necesitamos “pegar” o usar objetos de diferentes formatos para obtener un solo resultado. También son útiles cuando hacemos “for loops” o bucles, para hacer tareas repetitivas. El manejo de listas es un poco avanzado para comenzar a trabajar en R, pero son muy importantes y no pueden ser pasadas por alto en este nivel básico.\nCuando tratamos de visualizar una lista, lo primero que vemos es el orden del objeto dentro de doble corchete y luego el contenido del objeto. Copia el siguiente texto y pégalo en la consola para que veas un ejemplo:\n\n#vamos a crear varios objetos \n\nvect1 &lt;- c(\"a\", \"b\", \"c\")\nvect2 &lt;- c(seq(1:10))\nvect3 &lt;- letters\nvect4 &lt;- mtcars[1:5,2:3]\n#vamos a crear una lista de objetos\n\nlista &lt;- list(vect1, vect2, vect3, vect4)\n\nSi desde la misma consola llamamos al objeto lista que creamos, con solo escribir nombre del objeto, “lista” en este caso, tendremos el siguiente resultado:\n\nlista\n\n[[1]]\n[1] \"a\" \"b\" \"c\"\n\n[[2]]\n [1]  1  2  3  4  5  6  7  8  9 10\n\n[[3]]\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\n[[4]]\n                  cyl disp\nMazda RX4           6  160\nMazda RX4 Wag       6  160\nDatsun 710          4  108\nHornet 4 Drive      6  258\nHornet Sportabout   8  360\n\n\nTambién desde el panel del ambiente de trabajo en Rstudio podemos ver los objetos tipo listas, cuantos elementos tiene y si desplegamos podemos ver sus elementos, así como también el tipo de elemento y características.\n\n\n\nSi queremos llamar un objeto dentro de una lista simplemente escribimos el nombre de la lista abrimos doble corchete y ponemos dentro el numero de orden que corresponde el elemento que queremos,\n\n\n\nlista[[1]] #nos nos arroja el resultado de todo el contenido del elemento 1, que en este caso es un vector\n\n[1] \"a\" \"b\" \"c\"\n\n\nDentro de los ejercicios que vamos a hacer usaremos las listas, por ejemplo, con estas podemos cargar múltiples archivos como objetos desde una carpeta para facilitar el proceso de importación.\nAquí un escenario de ejemplo:\nEn la carpeta de “datos” o “Fuente” dentro del proyecto en que se esté trabajando digamos que hay 3 bases de datos en formato excel con similar estructura (ejemplo, provincia_a.xlsx, provincia_b.xlsx, provincia_c.xlsx) y la tarea es unir estas bases de datos en una sola base de datos:\n\n#Cargando el paquete {rio} para importar bases de datos y {tidyverse} para manipulación de datos\npacman::p_load(rio,      \n               tidyverse)  \n\n#para crear un vector con las rutas completa de varios archivos\nruta_archivos &lt;- dir(\"datos\", #nombre de la carpeta donde están los archivos fuente\n                     pattern = \"xlsx\", #patrón presente en todos los archivos a importar\n                     full.names = TRUE #argumento para crear la ruta completa de cada archivo\n                     )\n\nlista_bases &lt;- map(ruta_archivos, import)# la funcion map (que viene de tidyiverse) va a crear un objeto lista que va a contener cada una de las bases de datos que fueron especificadas en el vector ruta_archivos\n\nhead(lista_bases[[1]]) #este comando nos permite ver las primeras 5 filas en la base de datos localizada en la posición 1",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Objetos en R</span>"
    ]
  },
  {
    "objectID": "04-objetosenr.html#funciones",
    "href": "04-objetosenr.html#funciones",
    "title": "5  Objetos en R",
    "section": "5.5 Funciones",
    "text": "5.5 Funciones\nOtro tipo de objeto que no necesariamente almacena datos, pero sí podemos crear objetos de datos, son las funciones. Si te has dado cuenta, hasta ahora se han mencionado mucho dado que todo el código que vamos a ir escribiendo se hace mayormente con funciones, de hecho, como se mencionó arriba, la mayoría de los paquetes son una compilación de funciones. Nosotros podemos crear funciones que usan funciones ya sean de R base o incluso de otros paquetes.\nLas funciones nos ayudan a agilizar el trabajo porque son un conjunto de instrucciones dentro de nuestra rutina. Un ejemplo de esto es que podemos crear una función que nos produzca un gráfico de curva epidémica de un período y lugar determinados y obtendríamos el resultado, el gráfico, y los dos parámetros: el periodo y el lugar.\nPara crear una función usamos la siguiente sintaxis:\n\nVamos hacer un ejercicio simple para entender mejor una función:\n\n#una funcion para calcular el indice de masa corporal\nmi_funcion &lt;- function(peso, altura){ \n  \n  resultado &lt;- round(peso/(altura/100)^2,2) #asigna al elemento resultado el la operación entre peso y altura y luego redondear el valor\n  \n  print(paste0(\"Formula: \",peso,\"kg./\",altura/100,\"(m)2\")) # retorna un texto con el peso y la altura\n  \n  print(paste0(\"El indice de masa corporal es \", resultado)) # retorna el en un solo texto el indice de masa corporal obtenido\n  \n}\n\nmi_funcion(peso=115,altura=180) #llamamos la funcion y escribimos los parametros\n\n[1] \"Formula: 115kg./1.8(m)2\"\n[1] \"El indice de masa corporal es 35.49\"\n\n\nPara entender mejor cómo trabaja una función usando el ejemplo anterior, escribimos la función function(){ } luego del nombre de la función y el operador de asignación, y dentro de los paréntesis escribimos el nombre que queremos usar para los parámetros separados por coma, como hicimos en el ejemplo anterior, usamos peso y altura. Luego, dentro de las llaves vamos a proceder a escribir las expresiones para obtener un resultado; para esta función que calcula el índice de masa corporal (IMC), creamos un vector que es el resultado de la operación de la fórmula del IMC, donde el parámetro 1 es el peso que es dividido entre el parámetro 2, luego el parámetro 2 que es la altura, que a su vez es dividida entre 100 y luego elevada al cuadrado; la siguiente expresión presenta un texto con los parámetros y luego presenta otro texto con el resultado del IMC.\nDe las funciones se pueden escribir libros, de hecho, hay una vasta documentación de cómo trabajar con ellas, pues son el pilar de la programación en R.\nCuando te sientas más familiarizado y tengas más experiencia en R, puedes dedicarle tiempo a aprender sobre cómo trabajar más profundamente con las funciones. Por ahora, vamos a enfocarnos en los paquetes, que tienen funciones que nos facilitan el trabajo para el análisis de datos.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Objetos en R</span>"
    ]
  },
  {
    "objectID": "05-excel_a_R_intro.html",
    "href": "05-excel_a_R_intro.html",
    "title": "6  Transición desde Excel a R",
    "section": "",
    "text": "6.1 Tareas que se realizan en Excel (u otras hojas de cálculos) y su equivalente en R\nEn el aprendizaje de hacer análisis de datos usualmente se comienza usado hojas de cálculo como Microsoft Excel® para hacer tareas comunes como tablas, gráficos y cálculos estadísticos de forma general.\nSi ya estás trabajando con datos de forma regular, es muy probable que también te hayas expuesto a Excel, o lo usas constantemente en tu día a día como parte de las herramientas para procesar, analizar y presentar datos.\nEn nuestro caso, incluso sabiendo de la existencia de R, creíamos que con Excel podíamos hacerlo todo, como resolver cualquier situación relacionada con los datos, dado que MS Excel tiene muchas funcionalidades y es una herramienta muy completa como hoja de cálculo.\nA pesar de lo robusto que puede ser Excel u otra hoja de cálculo, hay límites donde la funcionalidad de R va más allá, empezando por la cantidad de datos que se pueden cargar en un archivo de Excel, el cual tiene un límite de 1,048,576 filas por hoja y 16,384 columnas, y aunque se puede usar Power Query para tener más filas y columnas, no menos cierto es que el archivo se hace muy “pesado” o “lento” para trabajar cuando se usa cierta cantidad de filas y/o columnas. Con R se pueden manejar bases de datos más grandes de manera más rápida, dependiendo de la memoria RAM instalada de la computadora. Te recomendamos que busques en la web cómo aumentar la memoria RAM de tu computadora.\nVolviendo a Excel, una hoja de cálculo en general es muy intuitiva y fácil de aprender, solo con abrir una hoja podemos comenzar a escribir agregando datos, escribir funciones para cálculos, hacer gráficos, etc., todo en un entorno guiado a través de los clics del ratón.\nEn cambio, R, como es un lenguaje de programación, es basado en comandos, sintaxis, donde mayormente todo debe de ser escrito, y realmente, es poco intuitivo al momento de comenzar a usarlo debido a lo complejo que resulta aprender un lenguaje nuevo. Sin embargo, esta forma de proceder a través de texto, también tiene sus ventajas cuando vamos a realizar una tarea, dado que debemos tener definido, de una forma u otra, lo que vamos a hacer y cuáles comandos deben de ser ejecutados para lograr la tarea. De hecho, de forma general, así es que debemos de trabajar, es decir, primero tener un plan en mente, cómo será ejecutado y definir cada paso. La idea es que el cambio de ambiente (pasar de usar más el ratón que escribir) puede ser un poco difícil al principio y sentirnos frustrados, pero con la constante exposición a un nuevo ambiente nos vamos adaptando, y se le hace fácil al cerebro en la medida que vamos practicando cada vez más y más.\nEn pocas palabras, es estar un poco “abierto” a cosas nuevas y darse la oportunidad de aprender y esforzarse más.\nEntrando en el tema de que cosas podemos hacer muy parecidas en R que se hacen con Excel, que son muy propias de lo que hacemos en epidemiología cuando analizamos datos es la exploración, en R podemos al igual que Excel podemos ver las bases de datos en un formato muy parecido a Excel, por ejemplo, podemos usar el comando View() (con V mayúscula) puedes escribir en la consola View(mtcars)[1] y se nos abrirá una ventana una tabla (no editable por cierto) pero nos sirve para ver los datos y filtrar muy parecido a Excel.\nOtra tarea muy común que realizamos en Excel son las “pivot tables” o tablas dinámicas, que nos permiten hacer tablas resúmenes de una base de datos con unos cuantos clics de ratón, en R, podemos hacer lo mismo con varios comandos.\nA simple vista se pudiera ver que en R es más complicado porque hay que escribir lo que se va a realizar, pero tomando en cuenta que en nuestro trabajo del día a día como investigadores hacemos muchas tablas resúmenes en Excel o tenemos que actualizarlas, y esto realmente toma mucho tiempo, sin embargo, en R solo nos tome tiempo hacer la primera tabla resumen, y posteriormente, tendríamos la ventaja de reusar el código solo cambiando algunos parámetros (como las variables), ahorrándonos mucho tiempo al no tener que repetir la misma tarea una y otra vez.\nEn Excel también usamos mucho las funciones y fórmulas para hacer cálculos, un ejemplo común es crear grupos de edades a partir de una variable numérica que representa la edad. De una forma u otra, usar funciones o fórmulas en Excel es similar a escribir códigos, y si puedes hacer fórmulas en Excel, entonces significa que ¡ya tienes experiencia codificando! En R, gracias a la disponibilidad de tantos paquetes (como el epikit), tenemos funciones que son específicamente para esto que se requiere menos esfuerzo.\nEn resumen, hay una vasta documentación disponible sobre cómo adaptarse al uso de R para usuarios de Excel, cuáles son las diferencias entre R y Excel y cómo se complementan. Cuando veamos sobre exportación de datos, veremos un buen ejemplo de esto.\nEn la web hay mucha documentación acerca de cómo acostumbrarse a realizar análisis de datos con R para usuarios de otros programas; recomendamos que hagas una búsqueda sobre el tema para que vayas adaptándote.\nNuestra mayor recomendación es que comiences a practicar con R haciendo lo que ya sabes hacer con Excel. También puedes fácilmente ver la documentación de una función ecribiendo el signo de interrogración (?) delante de la función que quieres: ?sum() y luego en el panel de ayuda vas a ver cuáles son los argumentos y también un ejemplo. En caso de no entender, busca en internet. ¿Te has dado cuenta de que hacemos mucho enfasís en “Buscar en la web”? Es porque esa es la mayor ventaja que tiene R como lenguaje de programación para análisis de datos, la comunidad de apoyo.\n[1] mtcars es una base de datos que trae R internamente como ejemplo sobre carros, para saber más de esta escribe en la consola help(“mtcars”)1",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Transición desde Excel a R</span>"
    ]
  },
  {
    "objectID": "05-excel_a_R_intro.html#tareas-que-se-realizan-en-excel-u-otras-hojas-de-cálculos-y-su-equivalente-en-r",
    "href": "05-excel_a_R_intro.html#tareas-que-se-realizan-en-excel-u-otras-hojas-de-cálculos-y-su-equivalente-en-r",
    "title": "6  Transición desde Excel a R",
    "section": "",
    "text": "Comparación entre Excel y R, tablas dinámicas",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Transición desde Excel a R</span>"
    ]
  },
  {
    "objectID": "05-excel_a_R_intro.html#footnotes",
    "href": "05-excel_a_R_intro.html#footnotes",
    "title": "6  Transición desde Excel a R",
    "section": "",
    "text": "mtcars es una base de datos que trae R internamente como ejemplo sobre carros, para saber más de esta escribe en la consola help(“mtcars”)↩︎",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Transición desde Excel a R</span>"
    ]
  },
  {
    "objectID": "06-analisisresultados.html",
    "href": "06-analisisresultados.html",
    "title": "7  Análisis de datos usando R",
    "section": "",
    "text": "7.1 Tareas que se deben de hacer para llevar a cabo un proyecto de analisis de datos\nEs posible que ya tienes conocimiento sobre la estructura del documento que debes desarrollar sobre analizar datos ya sea para toma de decisiones, u otros tipos como el trabajo final, aquí nos enfocaremos en la sección de resultados, donde tienes que realizar tablas, gráficos y análisis estadísticos. Aquí un listado de los elementos requeridos en la sección de resultado (ejemplos):\nCon una base de datos de ejemplo vamos a realizar los pasos en R para producir los requerimientos sugeridos anteriormente. Vamos a usar como fuente de datos para este ejercicio una base de datos de casos de VIH positivos notificados. (Esta base está disponible en el siguiente link).\nEsta base de datos (o la que vayas a usar) debes de colocarla en la subcarpeta de “Bases de datos” dentro de la carpeta del proyecto (ejemplo la mi carpeta donde está el proyecto de Rstudio se llama trabajos de campo). A modo de refrescamiento, ver la siguiente imagen de la estructura de sub-carpetas de un proyecto, su jerarquía.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Análisis de datos usando R</span>"
    ]
  },
  {
    "objectID": "06-analisisresultados.html#tareas-que-se-deben-de-hacer-para-llevar-a-cabo-un-proyecto-de-analisis-de-datos",
    "href": "06-analisisresultados.html#tareas-que-se-deben-de-hacer-para-llevar-a-cabo-un-proyecto-de-analisis-de-datos",
    "title": "7  Análisis de datos usando R",
    "section": "",
    "text": "Proporciona número de casos, incidencia o prevalencia del evento\nCaracterísticas clínicas, por ejemplo, síntomas comunes, porcentaje de hospitalizados o fallecidos, resultados de laboratorio como porcentaje de confirmados o distribución por especie o subtipo (generalmente presentados en una tabla)\nTiempo, por ejemplo, casos por año, mes, semana u otro intervalo apropiado, para mostrar patrones o cambios a lo largo del tiempo. Puede estratificarse por grupo de edad, sexo, región o característica de persona o lugar (generalmente se presenta en un gráfico). Señale cambios importantes, tendencias estacionales, aberraciones (p. Ej., Brotes) u otros patrones inusuales.\nLugar, por ejemplo, por área geográfica (generalmente se presenta con un mapa o una tabla). Los números y las tasas son igualmente importantes.\nPersona, por ejemplo, por grupo de edad, sexo y otras características relevantes (generalmente presentadas en una tabla). Los números y las tasas son importantes.\nOtros resultados destacados que no se incluyen en las categorías enumeradas anteriormente. Por ejemplo, muchos informes resumidos de vigilancia incluyen datos sobre la integridad y puntualidad de los informes de cada fuente de informes.\n\n\n\n\n\n\nEstructura básica recomendada para un proyecto en rstudio.\n\n\n\n7.1.1 Organización general antes de comenzar\nComo refrescamiento, antes de comenzar recuerda crear el proyecto (ver la sección de Comenzar a trabajar con R y la interfaz de Rstudio)@ref(comenzar-a-trabajar-con-r-y-la-interfaz-de-rstudio).\nProcesamiento de datos (cargar, editar, transformar dataframes)\n\nCrear un documento de rutina de R, (Ctrl+shift+N o en File, R script),\nComentar al menos el título del trabajo que estas haciendo (escribir # , que es el carácter para hacer comentarios, después de este puedes escribir cualquier cosa y no será interpretado como código).\nInstalar el paquete pacman(luego nos permitirá con mayor facilidad instalar el resto)\nCargar los siguientes paquetes:\n\n\nrio (para cargar archivos excel y otros formatos)\ntidyverse (para transformar, revisar la base de datos)\njanitor (para tablas y limpieza de datos)\nflextable (para formato de presentación de las tablas)\nlubridate (para trabajar con funciones con variables de formatos de fecha)\nskimr (para revisar la base de datos)\nhere (para ayudarnos a encontrar los archivos que vamos a usar, también a guardarlos)\ngtsummary (para hacer tablas presentables y cálculos que usamos con frecuencia en epidemiología)\n\nPara cargar estos paquetes procedemos a usar la función de p_load del paquete pacman, luego de terminar la instalación de pacman, en el panel editor de rutinas, en la nueva rutina escribes la siguiente función:\n\ninstall.packages(\"pacman\") #para instalar el paquete pacman (solo una vez)\n\n\npacman::p_load(rio, \n               tidyverse, \n               janitor, \n               lubridate, \n               skimr, \n               here,\n               flextable,\n               gtsummary) #para instalar y cargar los paquetes necesarios\n\nAlgo a tomar en cuenta que para instalar estos paquetes debes tener internet, después que estén instalados no se necesita instalar de nuevo (al menos que re-instales o actualices Rstudio).\nLuego cargar todos los paquetes puedes hacerlo desde una sola línea de código o de forma individual con la función de R base library().\nAntes de continuar, presiona Ctrl+S para guardar el archivo de rutina en la carpeta de tu proyecto “rutinas” o ya sea en el icono de guardar o desde file, recuerda, Ctrl+R al final de la línea de cógido o en “run” para ejecutarlo.\nAhora para cargar la base de datos al panel de área de trabajo tenemos dos formas, escribiendo directamente o como vimos cuando explicamos los dataframes en el capítulo de objetos de R @ref(objetos-en-r) usando la interfaz de rstudio o simplemente por comandos.\nRecuerda tener tus bases de datos en la carpeta de “datos” dentro de tu carpeta del proyecto, esto es muy importante para facilitar el trabajo.\nDe todas formas, vamos a ver como sería el código para cargar un archivo Excel:\n\n#para crear un objeto dataframe (nuestra base)\nbase &lt;- import(here(\"datos\", \"sinave_vih.xlsx\")) %&gt;% \n         clean_names()\n\nExplicando un poco el código anterior, estamos creando un nuevo objeto llamado “base”, a través de la función de import del paquete rio, que sirve para cargar archivos tipo .xls, .xlsx. y con la finalidad de localizar la ruta del archivo de la forma más sencilla posible usamos la función here() del paquete here escribiendo los parámetros de la sub-carpeta donde está la base de datos y el segundo parámetro, después de una coma, el nombre del archivo (ambos parámetros dentro de comillas). Luego sigue un operador pipe (%&gt;%) que significa “luego” a través de la función clean_names() del paquete janitor con el propósito de “normalizar” los nombres de las columnas o variables (poner todas en minúsculas, quitar caracteres poco comunes y espacios).\nSi hiciste los pasos correctamente debes de tener una imagen similar:\n\nDonde puedes ver a la derecha que ya tienes un objeto dataframe cargado (la base de datos) que tiene 25,227 filas y 71 variables o columnas.\n\n7.1.1.1 Exploración de la base de datos, (ver la base de datos antes de comenzar el procesamiento).\nEntonces, primera pregunta, ¿Cuál es el próximo paso por seguir? Realmente debería ser el análisis, pero primero, seria bueno revisar la base para ver los datos “malos” es decir, por ejemplo, valores anormales, campos vacíos o datos que se cargaron mal, como pasa a veces con las fechas.\nEl paquete de rio con la fórmula de import() hace un intento de determinar el tipo de variable que carga desde el archivo de Excel, pero a veces falla y es usualmente con las fechas porque sin querer había una fecha escrita en un formato no reconocido y el resto como número.\nPara “explorar” la base de datos podemos hacerlo de forma directa haciendo clic en el panel de ambiente de trabajo en el objeto base (o el nombre que le hayas dado) o puedes escribir en la consola de comandos View(base) para cargar el visor de datos.\nOtra forma más completa de explorar la base de datos es a través de la función skim() o skim_tee() (ambas producen el mismo reporte) del paquete skimr (waring2022?), para proveernos un resumen de cada variable, que tipo de variable es y nos muestra el total de campos vacíos, valores únicos por ejemplo.\nYa estamos entrando de lleno en el análisis, siempre el primer paso es ver, verificar los datos, valores extremos, datos faltantes, esto es una buena práctica (obligatoria diría yo) cuando estamos haciendo análisis, luego viene la limpieza de los datos.\nLuego de escribir en tu rutina el último comando, debes tener escrito el siguiente código y obtener este resultado:\n\nbase &lt;- import(here(\"datos\", \"sinave_vih.xlsx\")) %&gt;% \n  clean_names()\n\nskimr::skim_tee(base) #para genera un mini reporte de la base\n\n── Data Summary ────────────────────────\n                           Values\nName                       data  \nNumber of rows             25615 \nNumber of columns          75    \n_______________________          \nColumn type frequency:           \n  character                44    \n  logical                  9     \n  numeric                  20    \n  POSIXct                  2     \n________________________         \nGroup variables            None  \n\n── Variable type: character ────────────────────────────────────────────────────\n   skim_variable           n_missing complete_rate min  max empty n_unique\n 1 sospecha                        0      1         52   52     0        1\n 2 sexo                            0      1          8    9     0        2\n 3 grupo_edad                      0      1          2    8     0        9\n 4 ocupacion                   16923      0.339      1   25     0      796\n 5 actividad_ocupacional       24767      0.0331     5  120     0      167\n 6 grupo_ocupacional           24769      0.0330    21   76     0       10\n 7 categoria_de_afiliacion         0      1         10   23     0        5\n 8 ars                         20495      0.200      3   29     0       27\n 9 nivel_educativo              6763      0.736      8   25     0        6\n10 embarazada                  10260      0.599      2    2     0        2\n11 etapa_gestacion             23097      0.0983     5    9     0        3\n12 tipo_de_parto               25155      0.0180     7    7     0        3\n13 region_residencia            5040      0.803      6   20     0       10\n14 provincia                       0      1          7   25     0       33\n15 municipio                       0      1          6   33     0      289\n16 distrito                     3928      0.847      3   48     0      345\n17 seccion                      5673      0.779      4   53     0      809\n18 barrio                       8876      0.653      1   51     0     1750\n19 direccion                       0      1          3  174     0    21503\n20 das_dps_residencia          12816      0.500      9   12     0       11\n21 pais_procedencia                0      1          4   31     0       26\n22 telefono                     9929      0.612      1   12     0    14464\n23 colectivo                    8976      0.650      6   36     0       11\n24 nombre_colectivo             8390      0.672      1   50     0     2653\n25 id_muestra_1                25603      0.000468   1   11     0       12\n26 region                          0      1          6   20     0        9\n27 institucion                     0      1          3    9     0        6\n28 establecimiento                 0      1          4   49     0      303\n29 das_dps_establecimiento         0      1          4   22     0       40\n30 expediente                      0      1          1   20     0    22880\n31 tipo_atencion                  82      0.997      8   13     0        4\n32 complicaciones              24005      0.0629     7   69     0       19\n33 signos_y_sintomas               3      1.000      3 1118     0     9631\n34 comorbilidad                 9465      0.630      1  186     0      123\n35 muestra                       268      0.990      2    2     0        2\n36 resultado_final             20575      0.197      9   10     0        3\n37 condicion                       0      1          4    6     0        2\n38 gravedad                    16183      0.368      5   20     0        3\n39 folio_no                    25538      0.00301    7   11     0       75\n40 edad_fecha_defuncion        25510      0.00410    5    8     0       74\n41 diag_final                  24394      0.0477    10   56     0        6\n42 clasf_final                 24394      0.0477    10   10     0        3\n43 fuente_deteccion                0      1         14   24     0        5\n44 confirmado_por              24396      0.0476    11   19     0        2\n   whitespace\n 1          0\n 2          0\n 3          0\n 4          0\n 5          0\n 6          0\n 7          0\n 8          0\n 9          0\n10          0\n11          0\n12          0\n13          0\n14          0\n15          0\n16          0\n17          0\n18          0\n19          0\n20          0\n21          0\n22          0\n23          0\n24          0\n25          0\n26          0\n27          0\n28          0\n29          0\n30          0\n31          0\n32          0\n33          0\n34          0\n35          0\n36          0\n37          0\n38          0\n39          0\n40          0\n41          0\n42          0\n43          0\n44          0\n\n── Variable type: logical ──────────────────────────────────────────────────────\n  skim_variable         n_missing complete_rate mean count\n1 fecha_inicio_erupcion     25615             0  NaN \": \" \n2 id_muestra_2              25615             0  NaN \": \" \n3 sitio_primario            25615             0  NaN \": \" \n4 tipo_histologico          25615             0  NaN \": \" \n5 cie10_basica              25615             0  NaN \": \" \n6 cie10_a                   25615             0  NaN \": \" \n7 cie10_b                   25615             0  NaN \": \" \n8 cie10_c                   25615             0  NaN \": \" \n9 cie10_d                   25615             0  NaN \": \" \n\n── Variable type: numeric ──────────────────────────────────────────────────────\n   skim_variable          n_missing complete_rate       mean       sd    p0\n 1 pxid                           0       1       12808      7395.        1\n 2 fecha_nacimiento               0       1       30282.     4960.     8416\n 3 edad1                        119       0.995      36.8      13.4       0\n 4 edad2                      20494       0.200       0.0842    0.710     0\n 5 edad3                      20537       0.198       0.101     1.40      0\n 6 semanas_amenorrea          23407       0.0862     21.3       9.75      0\n 7 semana_inicio_sintomas         0       1          25.6      15.3       1\n 8 mes_inicio_sintomas            0       1           6.32      3.50      1\n 9 ano_inicio_sintomas            0       1        2019.        1.41   2016\n10 semana_atencion                0       1          25.7      15.2       1\n11 mes_atencion                   0       1           6.31      3.48      1\n12 ano_atencion                   0       1        2019.        1.40   2017\n13 semana_toma_muestra        13577       0.470      25.5      14.9       1\n14 fecha_toma_muestra         13577       0.470   43672.      531.    42737\n15 semana_notificacion            0       1          26.1      15.0       1\n16 fecha_notificacion             0       1       43738.      513.    42738\n17 semana_defuncion           20496       0.200       0.553     4.34      0\n18 mes_defuncion              25510       0.00410     6.53      3.28      1\n19 ano_defuncion              25510       0.00410  2020.        1.44   2017\n20 fecha_defuncion            25510       0.00410 43922.      531.    42769\n       p25   p50    p75  p100 hist \n 1  6404.  12808 19212. 25615 ▇▇▇▇▇\n 2 27144.  30902 33921  44501 ▁▁▆▇▁\n 3    27      35    45     98 ▁▇▅▁▁\n 4     0       0     0     11 ▇▁▁▁▁\n 5     0       0     0     30 ▇▁▁▁▁\n 6    13.8    20    29     42 ▂▆▇▅▃\n 7    11      26    39     53 ▇▆▇▆▆\n 8     3       6     9     12 ▇▅▅▅▇\n 9  2018    2019  2020   2021 ▆▆▇▆▇\n10    11      26    39     53 ▇▆▆▆▆\n11     3       6     9     12 ▇▅▅▅▇\n12  2018    2019  2020   2021 ▅▆▇▆▇\n13    12      25    38     53 ▇▆▆▆▆\n14 43214   43638 44174  44567 ▆▆▇▅▇\n15    12      26    39     53 ▇▆▇▆▆\n16 43315   43718 44232  44615 ▅▆▇▆▇\n17     0       0     0     52 ▇▁▁▁▁\n18     4       6     9     12 ▇▆▇▃▇\n19  2019    2020  2021   2021 ▃▁▂▅▇\n20 43615   44110 44362  44562 ▃▁▂▅▇\n\n── Variable type: POSIXct ──────────────────────────────────────────────────────\n  skim_variable         n_missing complete_rate min                \n1 fecha_inicio_sintomas         0             1 2016-12-03 00:00:00\n2 fecha_atencion                0             1 2017-01-02 00:00:00\n  max                 median              n_unique\n1 2022-01-01 00:00:00 2019-08-15 00:00:00     1811\n2 2022-01-01 00:00:00 2019-08-23 00:00:00     1653\n\n\nEn el ejemplo anterior:\n\n¿Cuántas variables de texto, numéricas, lógicas (si/no, 1/0), de fechas se cargaron?\n¿Cuantas de las variables están en blanco o tienen muchos valores vacíos, cómo es la distribución de las variables numéricas y fechas, (valores extremos)?\n¿Hay variables que se importaron incorrectamente? Variables que son de un formato y se importaron de otro tipo (fechas que se importan como texto o número por ejemplo)\n\nEstas son las preguntas que debemos hacernos a partir de este resumen para ir viendo la data y hacer la limpieza de datos como por ejemplo excluir columnas o variables, filtrar valores extremos o editarlos, cambiar o corregir el formato.\nEn el ejemplo anterior vemos que tenemos 4 tablas de tipo de variables (“Column type frequency:”)\n\nLuego debajo veremos en detalle por cada tipo de variable una tabla con el nombre de la variable, el total de campos vacíos, la tasa de completitud, valores mínimos, máximos, promedios y valores únicos.\n\n\n\n\nResaltado podemos ver los detalles que la función skim() nos brinda como es un inventario de las variables de un dataframe por tipo de variable.\n\n\nEn general, después de este resumen se pueden definir próximos pasos para el análisis, incluir en tu reporte, en anexos, un resumen como este, añade más “confianza” a tus hallazgos y conclusiones porque estás mostrando de forma rápida la “salud” de tus datos.\nEsta exploración inicial de datos puedes hacerlo de diferentes maneras, te muestro esta de usar el paquete skimr porque es más “amigable”, detallada y rápida.\nA medida que vamos avanzando con este ejercicio, vamos a explicar en más detalles los tipos de campos/variables que identifica R.\n\n\n7.1.1.2 Limpieza /re-structuración de datos\nEste paso vamos a tomar la base original y modificarla para preparar nuestro análisis. Tomando en cuenta que debes de preparar un plan de análisis y que este se enfocará en un análisis tipo descriptivo (en tiempo, lugar y persona) y hacer los siguientes pasos:\n\nVamos a revisar el listado de variables que obtuvimos del resumen del ejercicio anterior (resumen de variables) y seleccionar las que necesitamos para el análisis.\nVamos a re-codificar variables que necesiten cambios o hacer ajustes.\nVamos a excluir o modificar los valores de las variables de interés.\n\nUna de las características “poderosas” y deseadas de R es que puedes crear un nuevo objeto a partir de otro, dado que puedes hacer múltiples versiones del original.\nParticularmente para este análisis vamos a crear un nuevo objeto dataframe (lo podemos llamar base_arreglada) donde este solo tendrá las variables o columnas para nuestro análisis y trataremos de excluir los valores no deseados y crear nuevas variables a partir de las que tenemos.\nAgrega a tu rutina el siguiente código:\n\nbase_arreglada &lt;- base %&gt;% #creamos un nuevo elemento\n\n  select(fecha_notificacion, #seleccionamos las variables que necesitamos\n         fecha_atencion,\n         mes_atencion,\n         ano_atencion,\n         semana_atencion,\n         sexo,\n         pais_procedencia,\n         grupo_edad,\n         edad1,\n         nivel_educativo,\n         provincia,\n         das_dps_residencia,\n         das_dps_establecimiento,\n         clasf_final,\n         condicion) %&gt;% \n  \n  filter(!is.na(edad1)) %&gt;%  #filtramos aquellos casos que no tienen edad\n  \n  mutate(provincia_establecimiento=case_when(\n             str_detect(das_dps_establecimiento, \"SD-Area\")~\"Santo Domingo\",\n             str_detect(das_dps_establecimiento, \"Santiago I\")~\"Santiago\",\n             str_detect(das_dps_establecimiento, \"DN-Area \")~\"Distrito Nacional\",\n             TRUE~das_dps_establecimiento), #crear una nueva variable para combinar las areas de salud en la provincia del establecimiento\n         provincia_caso=str_sub(provincia, 4,-1L), #crear una nueva variable de provincia del caso pero sin la numeracion)\n         diagnosticado_misma_prov=case_when(\n              provincia_caso==provincia_establecimiento~1,\n                                            TRUE~0))\n  \n  head(base_arreglada) #para ver un ejemplo de la nueva base\n\n  fecha_notificacion fecha_atencion mes_atencion ano_atencion semana_atencion\n1              44383     2021-07-03            7         2021              26\n2              43444     2018-11-22           11         2018              47\n3              43454     2018-11-19           11         2018              47\n4              43460     2018-11-22           11         2018              47\n5              44398     2021-07-20            7         2021              29\n6              43182     2018-03-09            3         2018              10\n      sexo     pais_procedencia grupo_edad edad1           nivel_educativo\n1 Femenino República Dominicana      30_39    32 No sabe / Sin información\n2 Femenino República Dominicana      20_29    21            Primaria (1-4)\n3 Femenino República Dominicana      20_29    27            Primaria (1-4)\n4 Femenino República Dominicana      50_59    57            Primaria (1-4)\n5 Femenino República Dominicana      50_59    55            Primaria (1-4)\n6 Femenino República Dominicana      20_29    24                      &lt;NA&gt;\n         provincia das_dps_residencia das_dps_establecimiento clasf_final\n1 32 Santo Domingo        SD-Area VII             SD-Area VII        &lt;NA&gt;\n2 21 San Cristóbal               &lt;NA&gt;           San Cristóbal        &lt;NA&gt;\n3 21 San Cristóbal               &lt;NA&gt;           San Cristóbal        &lt;NA&gt;\n4 21 San Cristóbal               &lt;NA&gt;           San Cristóbal        &lt;NA&gt;\n5      25 Santiago        Santiago II            Santiago III        &lt;NA&gt;\n6   29 Monte Plata               &lt;NA&gt;            Santiago III        &lt;NA&gt;\n  condicion provincia_establecimiento provincia_caso diagnosticado_misma_prov\n1      Vivo             Santo Domingo  Santo Domingo                        1\n2      Vivo             San Cristóbal  San Cristóbal                        1\n3      Vivo             San Cristóbal  San Cristóbal                        1\n4      Vivo             San Cristóbal  San Cristóbal                        1\n5      Vivo                  Santiago       Santiago                        1\n6      Vivo                  Santiago    Monte Plata                        0\n\n\nVamos a explicar el código anterior, el primer paso crear un nuevo objeto (base_arregada)  a partir del dataframe “base” usando el operador de asignación y luego o “entonces” (operador pipe o %&gt;%) usamos la función select() de tidyverse para especificar las variables que vamos a usar en el análisis, luego (operador pipe) usamos la función filter para excluir aquellas observaciones que no tienen edad a través del operador ! (operador de negación) y la función is.na()  de R base. Luego vamos usamos la función de mutate() para renombrar variable de provincia_establecimiento  y también la variable provincia_caso  para poder fusionar las áreas de salud en provincia a través de la función case_when() de tidyverse.  Después para ver el nuevo dataframe (base_arreglada) usamos la función head() de utils para ver las primeras 6 observaciones.\nYa con este nuevo dataframe podemos comenzar a trabajar en nuestro análisis.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Análisis de datos usando R</span>"
    ]
  },
  {
    "objectID": "06-analisisresultados.html#análisis-de-tiempo",
    "href": "06-analisisresultados.html#análisis-de-tiempo",
    "title": "7  Análisis de datos usando R",
    "section": "7.2 Análisis de tiempo",
    "text": "7.2 Análisis de tiempo\nAhora vamos a comenzar a hacer tablas usando algunas de las funciones de janitor para hacer nuestra exploración de datos.\nRecordando que vamos a ir explicando los diferentes tipos de formatos de las variables o campos, en esta sección vamos a ver un formato muy común que son las fechas, las cual usamos para poder ver en el tiempo el comportamiento de algún evento. Cuando usamos la función de import() del paquete rio esta hace lo mejor posible de detectar que tiempo de campo es en base a su contenido, de forma predeterminada como formato o clase POCIXct o tiempo calendario,que es un formato especial de R para almacenar números en formato de fecha desde 1970-01-01. A veces los campos de fechas pueden importarse como texto y por lo tanto debemos transformar estos para poder hacer cálculos usando fechas. También para los gráficos la clase Date es mejor (veremos más con el uso del paquete ggplot) por lo que una recomendación es transformar los campos de fecha POCIXct a Date (si se importaron correctamente claro). Una forma para ver de forma rápida e individuar a que formato o clase pertenece una variable podemos usar la función class() de R base, por ejemplo: class(base_arreglada$fecha_atencion) si la queremos transformar puedes incluir en el ejercicio anterior, dentro de la función de mutate el cambio de las variable de fecha usando la función as.Date(). Para ver que clase o formato son todas las variables (muy parecido al uso de la función skim() ) de forma rápida, podemos usar la función str() de R base.\n\nbase_arreglada &lt;- base %&gt;%\n\n  select(fecha_notificacion,\n         fecha_atencion,\n         mes_atencion,\n         ano_atencion,\n         semana_atencion,\n         sexo,\n         pais_procedencia,\n         grupo_edad,\n         edad1,\n         nivel_educativo,\n         provincia,\n         das_dps_residencia,\n         das_dps_establecimiento,\n         clasf_final,\n         condicion) %&gt;% \n  \n  filter(!is.na(edad1)) %&gt;%  \n  \n  mutate(provincia_establecimiento=case_when(\n             str_detect(das_dps_establecimiento, \"SD-Area\")~\"Santo Domingo\",\n             str_detect(das_dps_establecimiento, \"Santiago I\")~\"Santiago\",\n             str_detect(das_dps_establecimiento, \"DN-Area \")~\"Distrito Nacional\",\n             TRUE~das_dps_establecimiento),\n         provincia_caso=str_sub(provincia, 4,-1L), \n         \n         diagnosticado_misma_prov=case_when(\n              provincia_caso==provincia_establecimiento~1,\n                                            TRUE~0),\n         fecha_notificacion=as.Date(fecha_notificacion), #Agregamos el cambio de tipo POSIXct a Date para ambas variables fecha.\n         fecha_atencion=as.Date(fecha_atencion))\n  \n  str(base_arreglada) #para ver las clases de todas las variables en el dataframe\n\n'data.frame':   25496 obs. of  18 variables:\n $ fecha_notificacion       : Date, format: \"2091-07-08\" \"2088-12-11\" ...\n $ fecha_atencion           : Date, format: \"2021-07-03\" \"2018-11-22\" ...\n $ mes_atencion             : num  7 11 11 11 7 3 2 9 7 8 ...\n $ ano_atencion             : num  2021 2018 2018 2018 2021 ...\n $ semana_atencion          : num  26 47 47 47 29 10 6 39 27 33 ...\n $ sexo                     : chr  \"Femenino\" \"Femenino\" \"Femenino\" \"Femenino\" ...\n $ pais_procedencia         : chr  \"República Dominicana\" \"República Dominicana\" \"República Dominicana\" \"República Dominicana\" ...\n $ grupo_edad               : chr  \"30_39\" \"20_29\" \"20_29\" \"50_59\" ...\n $ edad1                    : num  32 21 27 57 55 24 24 19 36 18 ...\n $ nivel_educativo          : chr  \"No sabe / Sin información\" \"Primaria (1-4)\" \"Primaria (1-4)\" \"Primaria (1-4)\" ...\n $ provincia                : chr  \"32 Santo Domingo\" \"21 San Cristóbal\" \"21 San Cristóbal\" \"21 San Cristóbal\" ...\n $ das_dps_residencia       : chr  \"SD-Area VII\" NA NA NA ...\n $ das_dps_establecimiento  : chr  \"SD-Area VII\" \"San Cristóbal\" \"San Cristóbal\" \"San Cristóbal\" ...\n $ clasf_final              : chr  NA NA NA NA ...\n $ condicion                : chr  \"Vivo\" \"Vivo\" \"Vivo\" \"Vivo\" ...\n $ provincia_establecimiento: chr  \"Santo Domingo\" \"San Cristóbal\" \"San Cristóbal\" \"San Cristóbal\" ...\n $ provincia_caso           : chr  \"Santo Domingo\" \"San Cristóbal\" \"San Cristóbal\" \"San Cristóbal\" ...\n $ diagnosticado_misma_prov : num  1 1 1 1 1 0 1 1 1 1 ...\n\n\nPara este análisis nos interesaría ver el comportamiento mensual de cada año de los casos reportados y aunque ya tenemos esta variables, mes y año de reporte y estas se pueden “fusionar” a veces es mejor hacer una transformación del formato dado que hacer esta fusión de la variable año y mes puede alterar el orden si no se hace de forma correcta. Con menos cantidad de código es más fácil transformar una fecha a otro tipo de presentación.\nVeamos en acción lo que acabo de explicar:\n\nbase_arreglada %&gt;% \n  \n  mutate(a_mes_atencion=format(fecha_atencion, \"%Y-%m\")) %&gt;% #Con esta línea de codigos creamos una nueva variable con el mes y año de atención\n  \n  tabyl(a_mes_atencion) #hacemos una tabla simple con la nueva variable\n\n a_mes_atencion   n      percent\n        2017-01 302 1.184500e-02\n        2017-02 273 1.070756e-02\n        2017-03 346 1.357076e-02\n        2017-04 326 1.278632e-02\n        2017-05 403 1.580640e-02\n        2017-06 302 1.184500e-02\n        2017-07 396 1.553185e-02\n        2017-08 383 1.502196e-02\n        2017-09 307 1.204110e-02\n        2017-10 385 1.510041e-02\n        2017-11 352 1.380609e-02\n        2017-12 284 1.113900e-02\n        2018-01 432 1.694383e-02\n        2018-02 422 1.655162e-02\n        2018-03 412 1.615940e-02\n        2018-04 366 1.435519e-02\n        2018-05 373 1.462975e-02\n        2018-06 335 1.313932e-02\n        2018-07 389 1.525730e-02\n        2018-08 420 1.647317e-02\n        2018-09 336 1.317854e-02\n        2018-10 482 1.890493e-02\n        2018-11 445 1.745372e-02\n        2018-12 414 1.623784e-02\n        2019-01 564 2.212112e-02\n        2019-02 571 2.239567e-02\n        2019-03 525 2.059147e-02\n        2019-04 445 1.745372e-02\n        2019-05 580 2.274867e-02\n        2019-06 395 1.549263e-02\n        2019-07 504 1.976781e-02\n        2019-08 403 1.580640e-02\n        2019-09 367 1.439441e-02\n        2019-10 370 1.451208e-02\n        2019-11 409 1.604173e-02\n        2019-12 245 9.609350e-03\n        2020-01 618 2.423910e-02\n        2020-02 636 2.494509e-02\n        2020-03 372 1.459052e-02\n        2020-04 100 3.922184e-03\n        2020-05 242 9.491685e-03\n        2020-06 391 1.533574e-02\n        2020-07 382 1.498274e-02\n        2020-08 345 1.353153e-02\n        2020-09 384 1.506119e-02\n        2020-10 528 2.070913e-02\n        2020-11 594 2.329777e-02\n        2020-12 431 1.690461e-02\n        2021-01 491 1.925792e-02\n        2021-02 636 2.494509e-02\n        2021-03 590 2.314088e-02\n        2021-04 636 2.494509e-02\n        2021-05 499 1.957170e-02\n        2021-06 436 1.710072e-02\n        2021-07 610 2.392532e-02\n        2021-08 576 2.259178e-02\n        2021-09 525 2.059147e-02\n        2021-10 418 1.639473e-02\n        2021-11 455 1.784594e-02\n        2021-12 337 1.321776e-02\n        2022-01   1 3.922184e-05\n\n\nComo podemos ver en la salida anterior tenemos 5 años completos y el primer mes del 2022, si vamos a centrarnos en los últimos 3 años y podemos hacerlo con la función filter():\n\nbase_arreglada %&gt;% \n  \n  mutate(a_mes_atencion=format(fecha_atencion, \"%Y-%m\")) %&gt;% \n \n   filter(fecha_atencion&gt;=\"2019-01-01\", fecha_atencion&lt;\"2022-01-01\") %&gt;%  #Especificamos hasta donde queremos el periodo \n  \n  tabyl(a_mes_atencion) #hacemos una tabla simple con la nueva variable\n\n a_mes_atencion   n    percent\n        2019-01 564 0.03395545\n        2019-02 571 0.03437688\n        2019-03 525 0.03160747\n        2019-04 445 0.02679109\n        2019-05 580 0.03491872\n        2019-06 395 0.02378085\n        2019-07 504 0.03034317\n        2019-08 403 0.02426249\n        2019-09 367 0.02209512\n        2019-10 370 0.02227574\n        2019-11 409 0.02462372\n        2019-12 245 0.01475015\n        2020-01 618 0.03720650\n        2020-02 636 0.03829019\n        2020-03 372 0.02239615\n        2020-04 100 0.00602047\n        2020-05 242 0.01456954\n        2020-06 391 0.02354004\n        2020-07 382 0.02299819\n        2020-08 345 0.02077062\n        2020-09 384 0.02311860\n        2020-10 528 0.03178808\n        2020-11 594 0.03576159\n        2020-12 431 0.02594822\n        2021-01 491 0.02956051\n        2021-02 636 0.03829019\n        2021-03 590 0.03552077\n        2021-04 636 0.03829019\n        2021-05 499 0.03004214\n        2021-06 436 0.02624925\n        2021-07 610 0.03672486\n        2021-08 576 0.03467790\n        2021-09 525 0.03160747\n        2021-10 418 0.02516556\n        2021-11 455 0.02739314\n        2021-12 337 0.02028898\n\n\nEn los parámetros de filter() llamamos la variable dos veces usando los operadores mayor (&gt;) e igual (=) para que se incluya el valor más antiguo seguido de una coma y para el valor más reciente usamos menor que (&lt;) con un valor que no vamos a necesitar. Cuando especificamos el valor de una fecha siempre debe de ir entre comillas (” “). Todavía en el ejercicio anterior no hemos creado un nuevo objeto, para esto podemos hacer lo siguiente:\n\ntabla_01 &lt;- base_arreglada %&gt;%  #Nuevo objeto\n  \n  mutate(a_mes_atencion=format(fecha_atencion, \"%Y-%m\")) %&gt;% \n \n   filter(fecha_atencion&gt;=\"2019-01-01\", fecha_atencion&lt;\"2022-01-01\") %&gt;% \n  \n  tabyl(a_mes_atencion)\n\nAhora vamos a ver esta distribución mensual por condición de egreso:\n\ntabla_01 &lt;- base_arreglada %&gt;% \n  \n  mutate(a_mes_atencion=format(fecha_atencion, \"%Y-%m\")) %&gt;% \n \n   filter(fecha_atencion&gt;=\"2019-01-01\", fecha_atencion&lt;\"2022-01-01\") %&gt;% \n  \n  tabyl(a_mes_atencion,\n        condicion)  %&gt;%  #Agragamos la variable nueva o de columna\n  adorn_totals(c(\"col\", \"row\")) %&gt;% #A partir de esta línea, se usan funciones de \"adorn_\" para agregar detalles a la tabla\n  adorn_percentages() %&gt;% \n  adorn_pct_formatting() %&gt;% \n  adorn_ns()\n  \n\ntabla_01\n\n a_mes_atencion    Muerto            Vivo           Total\n        2019-01 0.4%  (2)  99.6%    (562) 100.0%    (564)\n        2019-02 0.0%  (0) 100.0%    (571) 100.0%    (571)\n        2019-03 0.0%  (0) 100.0%    (525) 100.0%    (525)\n        2019-04 0.0%  (0) 100.0%    (445) 100.0%    (445)\n        2019-05 0.3%  (2)  99.7%    (578) 100.0%    (580)\n        2019-06 0.3%  (1)  99.7%    (394) 100.0%    (395)\n        2019-07 0.2%  (1)  99.8%    (503) 100.0%    (504)\n        2019-08 0.0%  (0) 100.0%    (403) 100.0%    (403)\n        2019-09 0.3%  (1)  99.7%    (366) 100.0%    (367)\n        2019-10 0.3%  (1)  99.7%    (369) 100.0%    (370)\n        2019-11 0.2%  (1)  99.8%    (408) 100.0%    (409)\n        2019-12 0.0%  (0) 100.0%    (245) 100.0%    (245)\n        2020-01 0.0%  (0) 100.0%    (618) 100.0%    (618)\n        2020-02 0.6%  (4)  99.4%    (632) 100.0%    (636)\n        2020-03 0.8%  (3)  99.2%    (369) 100.0%    (372)\n        2020-04 2.0%  (2)  98.0%     (98) 100.0%    (100)\n        2020-05 1.7%  (4)  98.3%    (238) 100.0%    (242)\n        2020-06 0.3%  (1)  99.7%    (390) 100.0%    (391)\n        2020-07 0.3%  (1)  99.7%    (381) 100.0%    (382)\n        2020-08 0.0%  (0) 100.0%    (345) 100.0%    (345)\n        2020-09 1.0%  (4)  99.0%    (380) 100.0%    (384)\n        2020-10 0.4%  (2)  99.6%    (526) 100.0%    (528)\n        2020-11 0.2%  (1)  99.8%    (593) 100.0%    (594)\n        2020-12 0.9%  (4)  99.1%    (427) 100.0%    (431)\n        2021-01 0.2%  (1)  99.8%    (490) 100.0%    (491)\n        2021-02 0.6%  (4)  99.4%    (632) 100.0%    (636)\n        2021-03 0.7%  (4)  99.3%    (586) 100.0%    (590)\n        2021-04 0.6%  (4)  99.4%    (632) 100.0%    (636)\n        2021-05 0.6%  (3)  99.4%    (496) 100.0%    (499)\n        2021-06 2.1%  (9)  97.9%    (427) 100.0%    (436)\n        2021-07 0.7%  (4)  99.3%    (606) 100.0%    (610)\n        2021-08 0.7%  (4)  99.3%    (572) 100.0%    (576)\n        2021-09 0.4%  (2)  99.6%    (523) 100.0%    (525)\n        2021-10 0.5%  (2)  99.5%    (416) 100.0%    (418)\n        2021-11 0.2%  (1)  99.8%    (454) 100.0%    (455)\n        2021-12 0.9%  (3)  99.1%    (334) 100.0%    (337)\n          Total 0.5% (76)  99.5% (16,534) 100.0% (16,610)\n\n\nLuego de ver el código anterior, también del paquete janitor, implementamos varias funciones asociadas con la función tabyl() para tablas con la finalidad de agregar totales y porcentajes.\nSi queremos presentar la tabla en un formato exportable, podemos usar la función flextable() del paquete flextable y nuestra primera tabla quedaría así:\n\ntabla_01 &lt;- base_arreglada %&gt;% \n  \n  mutate(a_mes_atencion=format(fecha_atencion, \"%Y-%m\")) %&gt;% \n \n   filter(fecha_atencion&gt;=\"2019-01-01\", fecha_atencion&lt;\"2022-01-01\") %&gt;% \n  \n  tabyl(a_mes_atencion,\n        condicion)  %&gt;%  #Agragamos la variable nueva o de columna\n  adorn_totals(c(\"col\", \"row\")) %&gt;% #A partir de esta línea, se usan funciones de \"adorn_\" para agregar detalles a la tabla\n  adorn_percentages() %&gt;% \n  adorn_pct_formatting() %&gt;% \n  adorn_ns() %&gt;% \n  flextable::flextable() # Con esta función creamos una versión presentable de la tabla\n\ntabla_01\n\na_mes_atencionMuertoVivoTotal2019-010.4%  (2)99.6%    (562)100.0%    (564)2019-020.0%  (0)100.0%    (571)100.0%    (571)2019-030.0%  (0)100.0%    (525)100.0%    (525)2019-040.0%  (0)100.0%    (445)100.0%    (445)2019-050.3%  (2)99.7%    (578)100.0%    (580)2019-060.3%  (1)99.7%    (394)100.0%    (395)2019-070.2%  (1)99.8%    (503)100.0%    (504)2019-080.0%  (0)100.0%    (403)100.0%    (403)2019-090.3%  (1)99.7%    (366)100.0%    (367)2019-100.3%  (1)99.7%    (369)100.0%    (370)2019-110.2%  (1)99.8%    (408)100.0%    (409)2019-120.0%  (0)100.0%    (245)100.0%    (245)2020-010.0%  (0)100.0%    (618)100.0%    (618)2020-020.6%  (4)99.4%    (632)100.0%    (636)2020-030.8%  (3)99.2%    (369)100.0%    (372)2020-042.0%  (2)98.0%     (98)100.0%    (100)2020-051.7%  (4)98.3%    (238)100.0%    (242)2020-060.3%  (1)99.7%    (390)100.0%    (391)2020-070.3%  (1)99.7%    (381)100.0%    (382)2020-080.0%  (0)100.0%    (345)100.0%    (345)2020-091.0%  (4)99.0%    (380)100.0%    (384)2020-100.4%  (2)99.6%    (526)100.0%    (528)2020-110.2%  (1)99.8%    (593)100.0%    (594)2020-120.9%  (4)99.1%    (427)100.0%    (431)2021-010.2%  (1)99.8%    (490)100.0%    (491)2021-020.6%  (4)99.4%    (632)100.0%    (636)2021-030.7%  (4)99.3%    (586)100.0%    (590)2021-040.6%  (4)99.4%    (632)100.0%    (636)2021-050.6%  (3)99.4%    (496)100.0%    (499)2021-062.1%  (9)97.9%    (427)100.0%    (436)2021-070.7%  (4)99.3%    (606)100.0%    (610)2021-080.7%  (4)99.3%    (572)100.0%    (576)2021-090.4%  (2)99.6%    (523)100.0%    (525)2021-100.5%  (2)99.5%    (416)100.0%    (418)2021-110.2%  (1)99.8%    (454)100.0%    (455)2021-120.9%  (3)99.1%    (334)100.0%    (337)Total0.5% (76)99.5% (16,534)100.0% (16,610)\n\n\nCon esta tabla podemos ir haciendo nuestro análisis de como los casos nuevos de VIH se han comportado en estos últimos 3 años. Podemos ir agregando en nuestro reporte “El total de casos reportados desde enero del 2019 hasta diciembre del 2021 fueron 16,374” por ejemplo. Otro dato que nos llama la atención es la proporción de fallecidos desde el inicio del periodo de análisis fue menor de 1% pero en los meses de abril-mayo del 2020 y septiembre y diciembre del 2020 fue mayor de lo esparado (estos son los puntualizaciones a tomar en cuenta para reportar y generar preguntas).\nUn detalle a resaltar es, en esta tabla (tabla_01) le agregamos un formato de presentación ya no la podemos usar para hacer otros análisis, como por ejemplo sacar el promedio de casos reportados por mes (u otras medidas de tendencia central). Digamos que quisiéramos reportar estos valores, simplemente podemos crear un objeto a partir de esta tabla original\n\nresumen_med_ten_cent &lt;- base_arreglada %&gt;%  #nuevo objeto, un dataframe\n  \n  mutate(a_mes_atencion=format(fecha_atencion, \"%Y-%m\")) %&gt;% \n \n   filter(fecha_atencion&gt;=\"2019-01-01\", fecha_atencion&lt;\"2022-01-01\") %&gt;%\n  \n  tabyl(a_mes_atencion, condicion) %&gt;%  \n  \n  adorn_totals(\"col\") %&gt;% #añadiendo total de columna\n  \n  reframe(casos_fallecidos_min=min(Muerto, na.rm = T), #funcion para resumir datos\n          casos_fallecidos_pro=mean(Muerto, na.rm = T),\n          casos_fallecidos_sd=sd(Muerto, na.rm = T),\n          casos_fallecidos_median=median(Muerto, na.rm=T),\n          casos_fallecidos_max=max(Muerto, na.rm = T),\n          \n          casos_vivos_min=min(Vivo, na.rm = T),\n          casos_vivos_pro=mean(Vivo, na.rm = T),\n          casos_vivos_sd=sd(Vivo, na.rm = T),\n          casos_vivos_median=median(Vivo, na.rm=T),\n          casos_vivos_max=max(Vivo, na.rm = T),\n\n          casos_total_min=min(Total, na.rm = T),\n          casos_total_pro=mean(Total, na.rm = T),\n          casos_total_sd=sd(Total, na.rm = T),\n          casos_total_median=median(Total, na.rm=T),\n          casos_total_max=max(Total, na.rm = T)) %&gt;% \n  pivot_longer(1:ncol(.), names_to = \"medida\", values_to = \"resultado\")\n\n\n  \nresumen_med_ten_cent\n\n# A tibble: 15 × 2\n   medida                  resultado\n   &lt;chr&gt;                       &lt;dbl&gt;\n 1 casos_fallecidos_min         0   \n 2 casos_fallecidos_pro         2.11\n 3 casos_fallecidos_sd          1.89\n 4 casos_fallecidos_median      2   \n 5 casos_fallecidos_max         9   \n 6 casos_vivos_min             98   \n 7 casos_vivos_pro            459.  \n 8 casos_vivos_sd             125.  \n 9 casos_vivos_median         450.  \n10 casos_vivos_max            632   \n11 casos_total_min            100   \n12 casos_total_pro            461.  \n13 casos_total_sd             125.  \n14 casos_total_median         450   \n15 casos_total_max            636   \n\n\nEl código anterior pudiera parecer cargado (y lo es) pero es una buena forma de ver los detalles de los valores que queremos obtener y también el uso de otras funciones que tienen mucho peso cuando manejamos datos como es reframe(), pivot_() de tidyverse que sirven para crear objetos con resumen de nuestros datos.\nCon el objeto resumen_med_ten_cent podemos ver que el promedio de casos totales por mes fue de 454 casos reportados, con un mínimo de 97 casos y un máximo de 618.\nOtro abordaje para obtener estos resultados y también en un formato presentable es usando la función summary de R base, nos ahorra muchos pasos. Aquí un ejemplo :\n\nbase_arreglada %&gt;%\n  \n  mutate(a_mes_atencion=format(fecha_atencion, \"%Y-%m\")) %&gt;% \n \n   filter(fecha_atencion&gt;=\"2019-01-01\", fecha_atencion&lt;\"2022-01-01\") %&gt;% \n  \n  tabyl(a_mes_atencion, condicion) %&gt;% \n  \n  adorn_totals(\"col\") %&gt;% \n  \n  summary() #Esta función se puede usar en los dataframes como en las matrices y vectores.\n\n a_mes_atencion         Muerto           Vivo           Total      \n Length:36          Min.   :0.000   Min.   : 98.0   Min.   :100.0  \n Class :character   1st Qu.:1.000   1st Qu.:380.8   1st Qu.:383.5  \n Mode  :character   Median :2.000   Median :449.5   Median :450.0  \n                    Mean   :2.111   Mean   :459.3   Mean   :461.4  \n                    3rd Qu.:4.000   3rd Qu.:571.2   3rd Qu.:572.2  \n                    Max.   :9.000   Max.   :632.0   Max.   :636.0  \n\n\nEl único detalle que no tenemos la desviación estándar, pero es un resumen bien completo para los valores numéricos.\nEn fin, tenemos una primera parte, vamos a ver la versión gráfica, usando las funciones del ggplot2 de tydiverse. Estas funciones se basan en las reglas de “gramática de gráficos” y haciendo una explicación bien resumida, esta gramática son reglas que similarmente tenemos en los idiomas como el español e inglés, también en los gráficos se aplican. Un gráfico es un compuesto de varios elementos como son la estética, el texto que lleva, los ejes, los formatos y se van construyendo por capas (layers en inglés). Hay libros dedicados a este tema que ayuda mucho a como construir de forma más estructurada un gráfico para analizar datos.\nLa ventaja de escribir código para crear gráficos es que permite automatizar el proceso y muchas veces podemos tomar prestado el código para no comenzar desde 0.\nLa mejor forma de explicar el código o lenguaje de gramática de gráficos (en adelante ggplot) es haciendo un ejercicio (así fue como pude entenderla y hacer los gráficos en R). También antes de hacer el gráfico, es bueno planear en base a los datos que se tienen que tipo de gráficos puede ser usado.\n\n\n\nTipos de gráficos a ser usado en base los datos\n\n\nVeamos un ejemplo usando la tabla que hemos venido trabajando:\n\nbase_arreglada %&gt;%\n  \n  mutate(a_mes_atencion=format(fecha_atencion, \"%Y-%m\")) %&gt;% \n \n   filter(fecha_atencion&gt;=\"2019-01-01\", fecha_atencion&lt;\"2022-01-01\") %&gt;% \n  \n  tabyl(a_mes_atencion, condicion) %&gt;% \n  \n  adorn_totals(\"col\") %&gt;%\nggplot(aes(x=a_mes_atencion, y=Total))+ #Espacificamos lo que vamos a graficar\n  geom_col() #Agregamos una capa de columnas\n\n\n\n\n\n\n\n\n¡Tenemos nuestro primer gráfico!, pero como puedes ver, puede ser mejorado con el fin de ser presentado en un reporte. Lo primero que vemos que está alterado es el eje x, o el año y la fecha de la notificación. Una forma de corregir esto es rotando a 90 grados el texto. A tomar en cuenta, cuando transformamos datos, usamos el operador pipe (%&gt;%), en ggplot, el equivalente es el signo de suma (+).\n\nbase_arreglada %&gt;%\n  \n  mutate(a_mes_atencion=format(fecha_atencion, \"%Y-%m\")) %&gt;% \n \n   filter(fecha_atencion&gt;=\"2019-01-01\", fecha_atencion&lt;\"2022-01-01\") %&gt;% \n  \n  tabyl(a_mes_atencion, condicion) %&gt;% \n  \n  adorn_totals(\"col\") %&gt;%\nggplot(aes(x=a_mes_atencion, y=Total))+ #Espacificamos lo que vamos a graficar\n  geom_col(color=\"black\", fill=\"white\")+ #Agregamos una capa de columnas y cambiamos el color del borde y del llenado\n  theme(axis.text.x = element_text(angle=90, vjust=0.5),\n        panel.background = element_rect(fill=\"white\")) #en esta sección cambiamos parametros de cada elemento del gráfico, color, tamaño, etc. de elementos generales, Solo estamos modificando el texto del eje x y el color de fondo del panel.\n\n\n\n\n\n\n\n\nHemos cambiado varios elementos como el color de las barras, la presentación del texto del eje x y el color de fondo del panel. Ahora vamos a agregar los títulos, como el título del gráfico y los de los ejes. Para esto insertamos el comando de labs() que significa labels o etiquetas.\n\nbase_arreglada %&gt;%\n  \n  mutate(a_mes_atencion=format(fecha_atencion, \"%Y-%m\")) %&gt;% \n \n   filter(fecha_atencion&gt;=\"2019-01-01\", fecha_atencion&lt;\"2022-01-01\") %&gt;% \n  \n  tabyl(a_mes_atencion, condicion) %&gt;% \n  \n  adorn_totals(\"col\") %&gt;%\nggplot(aes(x=a_mes_atencion, y=Total))+ #Espacificamos lo que vamos a graficar\n  geom_col(color=\"grey75\", fill=\"white\")+ #Agregamos una capa de columnas y cambiamos el color del borde y del llenado\n  labs(title=\"Distribución de casos de VIH notificados\",\n       subtitle = \"Rep. Dominicana, 2019-2021\",\n       x=\"Año y mes de diagnostico\",\n       y=\"Casos notificados\")+#Aquí especificamos el título, subtitulo y nombres de los ejes.\n  theme(axis.text.x = element_text(angle=90, vjust=0.5),\n        panel.background = element_rect(fill=\"white\")) #en esta sección cambiamos parametros de cada elemento del gráfico, color, tamaño, etc. de elementos generales, Solo estamos modificando el texto del eje x y el color de fondo del panel.\n\n\n\n\n\n\n\n\nSi comparas el primer gráfico con este se nota mucho la diferencia, (aunque todavía le falta mucho, este se puede presentar). Este seria nuestro histograma, de hecho, hay un geom_ específico para los histogramas, pero como mencioné anteriormente, para el paquete de ggplot hay mucha documentación que básicamente se requiere un entrenamiento aparte. Fijandote en los códigos de ejemplos y también buscando ejemplos en la red, (ejemplo: “como hacer un gráfico de línea con ggplot) vas a ir aprendiendo de forma rutinaria el uso de ggplot.\nTambién a considerar, a diferencias de las tablas, los gráficos podemos directamente (en caso de necesitar) ya sea al clipboard o guardarlos como imagen desde el menú de “plots” en el panel de archivos, gráficos, paquetes, ayuda y visor. Para esto podemos hacer clic donde dice “Export” en el menú y seleccionar ya sea guardar como imagen, como pdf o al clipboard para pegarlo en un documento de Word o Excel o una presentación. Si quieres cambiar el tamaño puede primero usar el zoom o la lupa y aquí manualmente cambiar el tamaño del gráfico y hacer un clic derecho y seleccionar guardar como (igual que desde una página web).\n\n\n\nPara exportar los gráficos de forma manual con Rstudio",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Análisis de datos usando R</span>"
    ]
  },
  {
    "objectID": "06-analisisresultados.html#análisis-de-lugar",
    "href": "06-analisisresultados.html#análisis-de-lugar",
    "title": "7  Análisis de datos usando R",
    "section": "7.3 Análisis de lugar",
    "text": "7.3 Análisis de lugar\nYa tenemos una tabla y un gráfico sencillo para describir el comportamiento de los casos notificados del evento (en este caso, VIH) y una salida para hacer un resumen descriptivo de los casos a través del tiempo. Ahora vamos a ver como ha sido la distribución por zona geográfica, en este caso las provincias de residencia de los casos. Para explorar, vamos a construir una tabla que nos será más sencilla y tambien para mostrar otra forma de como hacer tablas con detalles y listas para presentar usando el paquete gtsummary. Esta tabla tendrá como columnas de la provincia de residencia y otra con el total de casos por provincia. Podemos tomar el código que usamos para el análisis de tiempo pero con alguna variación, veamos:\n\ntabla_02 &lt;- base_arreglada %&gt;%\n  \n  mutate(a_mes_atencion=format(fecha_atencion, \"%Y-%m\")) %&gt;% \n \n   filter(fecha_atencion&gt;=\"2019-01-01\", fecha_atencion&lt;\"2022-01-01\") %&gt;% \n  \n  select(provincia_caso, condicion) %&gt;% #solo seleccionamos las variables que vamos a presentar en la tabla\n  \n  tbl_summary(by=condicion, sort = all_categorical() ~ \"frequency\") %&gt;% #este es la función más básica de gtsummary (tbl_summary), los parametros que usamos fue separar la columna condicion en sus categorias y ordenamos según la frecuencia de casos usando el parametro sort.\n  \n  add_overall() #con esta funcion de gtsummary agregamos una columna de total\n\ntabla_02\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nOverall\nN = 16,6101\nMuerto\nN = 761\nVivo\nN = 16,5341\n\n\n\n\nprovincia_caso\n\n\n\n\n\n\n\n\n    Santo Domingo\n3,907 (24%)\n5 (6.6%)\n3,902 (24%)\n\n\n    Santiago\n2,133 (13%)\n33 (43%)\n2,100 (13%)\n\n\n    Distrito Nacional\n2,100 (13%)\n10 (13%)\n2,090 (13%)\n\n\n    La Altagracia\n1,423 (8.6%)\n1 (1.3%)\n1,422 (8.6%)\n\n\n    San Cristóbal\n848 (5.1%)\n2 (2.6%)\n846 (5.1%)\n\n\n    Duarte\n762 (4.6%)\n0 (0%)\n762 (4.6%)\n\n\n    La Romana\n657 (4.0%)\n3 (3.9%)\n654 (4.0%)\n\n\n    San Pedro de Macorís\n571 (3.4%)\n1 (1.3%)\n570 (3.4%)\n\n\n    Puerto Plata\n569 (3.4%)\n0 (0%)\n569 (3.4%)\n\n\n    La Vega\n501 (3.0%)\n4 (5.3%)\n497 (3.0%)\n\n\n    Monte Cristi\n376 (2.3%)\n1 (1.3%)\n375 (2.3%)\n\n\n    Espaillat\n370 (2.2%)\n2 (2.6%)\n368 (2.2%)\n\n\n    Monte Plata\n245 (1.5%)\n3 (3.9%)\n242 (1.5%)\n\n\n    Samaná\n242 (1.5%)\n5 (6.6%)\n237 (1.4%)\n\n\n    Peravia\n237 (1.4%)\n0 (0%)\n237 (1.4%)\n\n\n    Valverde\n234 (1.4%)\n0 (0%)\n234 (1.4%)\n\n\n    Barahona\n225 (1.4%)\n0 (0%)\n225 (1.4%)\n\n\n    María Trinidad Sánchez\n183 (1.1%)\n0 (0%)\n183 (1.1%)\n\n\n    San Juan\n171 (1.0%)\n1 (1.3%)\n170 (1.0%)\n\n\n    Monseñor Nouel\n124 (0.7%)\n1 (1.3%)\n123 (0.7%)\n\n\n    Baoruco\n95 (0.6%)\n0 (0%)\n95 (0.6%)\n\n\n    El Seibo\n92 (0.6%)\n0 (0%)\n92 (0.6%)\n\n\n    Sánchez Ramírez\n86 (0.5%)\n1 (1.3%)\n85 (0.5%)\n\n\n    Azua\n80 (0.5%)\n0 (0%)\n80 (0.5%)\n\n\n    Hermanas Mirabal\n69 (0.4%)\n0 (0%)\n69 (0.4%)\n\n\n    Independencia\n69 (0.4%)\n1 (1.3%)\n68 (0.4%)\n\n\n    Hato Mayor\n56 (0.3%)\n0 (0%)\n56 (0.3%)\n\n\n    Dajabón\n55 (0.3%)\n0 (0%)\n55 (0.3%)\n\n\n    San José de Ocoa\n44 (0.3%)\n0 (0%)\n44 (0.3%)\n\n\n    Santiago Rodríguez\n33 (0.2%)\n1 (1.3%)\n32 (0.2%)\n\n\n    Extranjero\n21 (0.1%)\n1 (1.3%)\n20 (0.1%)\n\n\n    Pedernales\n21 (0.1%)\n0 (0%)\n21 (0.1%)\n\n\n    Elías Piña\n11 (&lt;0.1%)\n0 (0%)\n11 (&lt;0.1%)\n\n\n\n1 n (%)\n\n\n\n\n\n\n\n\nComo puedes ver en la tabla anterior, el 23% de los casos son de la provincia Santo Domingo, durante los 3 años que estamos describiendo.\nPara tener una tabla más acabada, como por ejemplo cambiar el idioma de los títulos a español, así como agregar una nota de pie y el título vamos añadiendo estas funciones del paquete de gtsummary.\n\n theme_gtsummary_language(language = \"es\", decimal.mark = \".\") #esta funcion global es para decirle al paquete gtsummary que idioma usar para las tablas\n\nSetting theme \"language: es\"\n\ntabla_02 &lt;- base_arreglada %&gt;%\n  \n  mutate(a_mes_atencion=format(fecha_atencion, \"%Y-%m\")) %&gt;% \n \n  filter(fecha_atencion&gt;=\"2019-01-01\", fecha_atencion&lt;\"2022-01-01\") %&gt;% \n  \n  select(provincia_caso, condicion) %&gt;% \n  \n  tbl_summary(by=condicion, sort = all_categorical() ~ \"frequency\",\n              \n              provincia_caso~\"Provincia de residencia del caso\") %&gt;%  #En la segunda linea, le cambiamos el nombre a la variable por otro nombre usando ~\n  \n  add_overall() %&gt;% \n  \n  modify_caption(\"**Tabla 2. Distribución de casos por provincia de residencia**\") %&gt;% #con este comando agregamos el título a la tabla\n  \n  bold_labels() # Con este ponemos en negritas los títulos de las categorías\n\n\n\n\ntabla_02\n\n\n\n\n\nTabla 2. Distribución de casos por provincia de residencia\n\n\n\n\n\n\n\n\nCaracterística\nGlobal\nN = 16,6101\nMuerto\nN = 761\nVivo\nN = 16,5341\n\n\n\n\nProvincia de residencia del caso\n\n\n\n\n\n\n\n\n    Santo Domingo\n3,907 (24%)\n5 (6.6%)\n3,902 (24%)\n\n\n    Santiago\n2,133 (13%)\n33 (43%)\n2,100 (13%)\n\n\n    Distrito Nacional\n2,100 (13%)\n10 (13%)\n2,090 (13%)\n\n\n    La Altagracia\n1,423 (8.6%)\n1 (1.3%)\n1,422 (8.6%)\n\n\n    San Cristóbal\n848 (5.1%)\n2 (2.6%)\n846 (5.1%)\n\n\n    Duarte\n762 (4.6%)\n0 (0%)\n762 (4.6%)\n\n\n    La Romana\n657 (4.0%)\n3 (3.9%)\n654 (4.0%)\n\n\n    San Pedro de Macorís\n571 (3.4%)\n1 (1.3%)\n570 (3.4%)\n\n\n    Puerto Plata\n569 (3.4%)\n0 (0%)\n569 (3.4%)\n\n\n    La Vega\n501 (3.0%)\n4 (5.3%)\n497 (3.0%)\n\n\n    Monte Cristi\n376 (2.3%)\n1 (1.3%)\n375 (2.3%)\n\n\n    Espaillat\n370 (2.2%)\n2 (2.6%)\n368 (2.2%)\n\n\n    Monte Plata\n245 (1.5%)\n3 (3.9%)\n242 (1.5%)\n\n\n    Samaná\n242 (1.5%)\n5 (6.6%)\n237 (1.4%)\n\n\n    Peravia\n237 (1.4%)\n0 (0%)\n237 (1.4%)\n\n\n    Valverde\n234 (1.4%)\n0 (0%)\n234 (1.4%)\n\n\n    Barahona\n225 (1.4%)\n0 (0%)\n225 (1.4%)\n\n\n    María Trinidad Sánchez\n183 (1.1%)\n0 (0%)\n183 (1.1%)\n\n\n    San Juan\n171 (1.0%)\n1 (1.3%)\n170 (1.0%)\n\n\n    Monseñor Nouel\n124 (0.7%)\n1 (1.3%)\n123 (0.7%)\n\n\n    Baoruco\n95 (0.6%)\n0 (0%)\n95 (0.6%)\n\n\n    El Seibo\n92 (0.6%)\n0 (0%)\n92 (0.6%)\n\n\n    Sánchez Ramírez\n86 (0.5%)\n1 (1.3%)\n85 (0.5%)\n\n\n    Azua\n80 (0.5%)\n0 (0%)\n80 (0.5%)\n\n\n    Hermanas Mirabal\n69 (0.4%)\n0 (0%)\n69 (0.4%)\n\n\n    Independencia\n69 (0.4%)\n1 (1.3%)\n68 (0.4%)\n\n\n    Hato Mayor\n56 (0.3%)\n0 (0%)\n56 (0.3%)\n\n\n    Dajabón\n55 (0.3%)\n0 (0%)\n55 (0.3%)\n\n\n    San José de Ocoa\n44 (0.3%)\n0 (0%)\n44 (0.3%)\n\n\n    Santiago Rodríguez\n33 (0.2%)\n1 (1.3%)\n32 (0.2%)\n\n\n    Extranjero\n21 (0.1%)\n1 (1.3%)\n20 (0.1%)\n\n\n    Pedernales\n21 (0.1%)\n0 (0%)\n21 (0.1%)\n\n\n    Elías Piña\n11 (&lt;0.1%)\n0 (0%)\n11 (&lt;0.1%)\n\n\n\n1 n (%)\n\n\n\n\n\n\n\n\nEn caso de que la variable de lugar que queramos usar es región de salud por ejemplo, con solo cambiar la variable a región (claro, hay que incluirla, dado que en dataframe base_arreglada no está seleccionada) o si a DPS/DAS que reporta también. El paquete gtsummary tiene muchos parámetros que nos facilita tanto para hacer el resumen como para presentar los datos.\nEn el siguiente Tutorial puedes ver en más detalles todos las opciones para generar una tabla usando gtsummary. Si usas Chrome o Edge, puedes traducir sin problemas al español dado que está solo en inglés.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Análisis de datos usando R</span>"
    ]
  },
  {
    "objectID": "06-analisisresultados.html#análisis-de-persona",
    "href": "06-analisisresultados.html#análisis-de-persona",
    "title": "7  Análisis de datos usando R",
    "section": "7.4 Análisis de persona",
    "text": "7.4 Análisis de persona\nEn esta sección vamos a usar de nuevo la función tbl_summary del paquete gtsummary para hacer el resumen de persona, en este paso toma en cuenta que desde que creamos el dataframe base_arreglada tomamos las variables que vamos a usar, si nos hacen falta, solo tenemos que actualizar este objeto. Las variables a usar serian el sexo, la edad, el país de procedencia, el grupo de edad y la condición de egreso, que para los pasos anteriores la hemos usado con la finalidad de ver el comportamiento de la letalidad. Algo que es importante recalcar, que vaya usando como buena práctica, ve nombrando los objetos de forma que sea fácil para identificar e integrar en tu informe luego, por ejemplo para las tablas he usado la nomenclatura “tabla_” así será más fácil asociar el orden como quisiera ir presentando en el informe.\n\ntabla_03 &lt;- base_arreglada %&gt;% \n  \nmutate(a_mes_atencion=format(fecha_atencion, \"%Y-%m\")) %&gt;% \n \n   filter(fecha_atencion&gt;=\"2019-01-01\", fecha_atencion&lt;\"2022-01-01\") %&gt;% \n  \n  select(sexo, grupo_edad,edad1, pais_procedencia, condicion) %&gt;%  # las variables para describir la poblacion\n\n  tbl_summary(by=sexo,\n             label = list(grupo_edad~\"Grupo de edad\", #Cuando tenemos dos o más variables que renombrar, debemos poner estas dentro de una lista\n              edad1~\"Edad en años\",\n              grupo_edad~\"Grupo de edad en años\",\n              pais_procedencia~\"Nacionalidad\",\n              condicion~\"Condición de Egreso\")) %&gt;% \n  add_overall() %&gt;% \n  modify_caption(\"**Tabla 3. Distribución de casos según características**\") %&gt;% \n  bold_labels()\n\ntabla_03\n\n\n\n\n\nTabla 3. Distribución de casos según características\n\n\n\n\n\n\n\n\nCaracterística\nGlobal\nN = 16,6101\nFemenino\nN = 8,4771\nMasculino\nN = 8,1331\n\n\n\n\nGrupo de edad en años\n\n\n\n\n\n\n\n\n    &lt;1\n2 (&lt;0.1%)\n2 (&lt;0.1%)\n0 (0%)\n\n\n    1_4\n92 (0.6%)\n39 (0.5%)\n53 (0.7%)\n\n\n    10_19\n731 (4.4%)\n491 (5.8%)\n240 (3.0%)\n\n\n    20_29\n4,575 (28%)\n2,617 (31%)\n1,958 (24%)\n\n\n    30_39\n4,618 (28%)\n2,358 (28%)\n2,260 (28%)\n\n\n    40_49\n3,417 (21%)\n1,612 (19%)\n1,805 (22%)\n\n\n    5_9\n46 (0.3%)\n25 (0.3%)\n21 (0.3%)\n\n\n    50_59\n1,948 (12%)\n842 (9.9%)\n1,106 (14%)\n\n\n    60 o más\n1,181 (7.1%)\n491 (5.8%)\n690 (8.5%)\n\n\nEdad en años\n35 (27, 46)\n34 (26, 44)\n37 (28, 48)\n\n\nNacionalidad\n\n\n\n\n\n\n\n\n    Canadá\n1 (&lt;0.1%)\n0 (0%)\n1 (&lt;0.1%)\n\n\n    Colombia\n3 (&lt;0.1%)\n0 (0%)\n3 (&lt;0.1%)\n\n\n    Cuba\n2 (&lt;0.1%)\n0 (0%)\n2 (&lt;0.1%)\n\n\n    Ecuador\n1 (&lt;0.1%)\n1 (&lt;0.1%)\n0 (0%)\n\n\n    Eslovaquia\n1 (&lt;0.1%)\n0 (0%)\n1 (&lt;0.1%)\n\n\n    Estados Unidos\n1 (&lt;0.1%)\n0 (0%)\n1 (&lt;0.1%)\n\n\n    Francia\n2 (&lt;0.1%)\n1 (&lt;0.1%)\n1 (&lt;0.1%)\n\n\n    Haití\n2,940 (18%)\n1,738 (21%)\n1,202 (15%)\n\n\n    Honduras\n1 (&lt;0.1%)\n0 (0%)\n1 (&lt;0.1%)\n\n\n    Islas Marianas del Norte\n1 (&lt;0.1%)\n0 (0%)\n1 (&lt;0.1%)\n\n\n    Islas Marshall\n1 (&lt;0.1%)\n1 (&lt;0.1%)\n0 (0%)\n\n\n    México\n14 (&lt;0.1%)\n8 (&lt;0.1%)\n6 (&lt;0.1%)\n\n\n    Nicaragua\n1 (&lt;0.1%)\n0 (0%)\n1 (&lt;0.1%)\n\n\n    Países Bajos\n2 (&lt;0.1%)\n0 (0%)\n2 (&lt;0.1%)\n\n\n    Polonia\n1 (&lt;0.1%)\n0 (0%)\n1 (&lt;0.1%)\n\n\n    República Democrática del Congo\n2 (&lt;0.1%)\n1 (&lt;0.1%)\n1 (&lt;0.1%)\n\n\n    República Dominicana\n13,588 (82%)\n6,724 (79%)\n6,864 (84%)\n\n\n    Ruanda\n1 (&lt;0.1%)\n0 (0%)\n1 (&lt;0.1%)\n\n\n    Suiza\n1 (&lt;0.1%)\n0 (0%)\n1 (&lt;0.1%)\n\n\n    Venezuela\n46 (0.3%)\n3 (&lt;0.1%)\n43 (0.5%)\n\n\nCondición de Egreso\n\n\n\n\n\n\n\n\n    Muerto\n76 (0.5%)\n24 (0.3%)\n52 (0.6%)\n\n\n    Vivo\n16,534 (100%)\n8,453 (100%)\n8,081 (99%)\n\n\n\n1 n (%); Mediana (Q1, Q3)\n\n\n\n\n\n\n\n\nAlgo a notar cuando generamos la tabla es que las nacionalidades son varias y con pocas observaciones, vamos a volver al proceso de “limpieza” para aquellas categorías que tienen pocas observaciones, agruparlas en la categoría de “otras”\n\ntabla_03 &lt;- base_arreglada %&gt;% \n  \nmutate(a_mes_atencion=format(fecha_atencion, \"%Y-%m\"),\n       \n       pais_procedencia=case_when(pais_procedencia==\"República Dominicana\"~\"Dominicana\",\n                                  pais_procedencia==\"Haití\"~\"Haitiana\",\n                                  TRUE~\"Otra Nacionalidad\")) %&gt;% #como vimos en la tabla anterior, dos nacionalidades sobresalen con respecto a la frecuencia, con la funcion case_when() podemos re-codificar\n \n   filter(fecha_atencion&gt;=\"2019-01-01\", fecha_atencion&lt;\"2022-01-01\") %&gt;%\n  \n  \n  select(sexo, grupo_edad,edad1, pais_procedencia, condicion) %&gt;%  # las variables para describir la poblacion\n\n  tbl_summary(by=sexo,\n             label = list(grupo_edad~\"Grupo de edad\", #Cuando tenemos dos o más variables que renombrar, debemos poner estas dentro de una lista\n              edad1~\"Edad en años\",\n              grupo_edad~\"Grupo de edad en años\",\n              pais_procedencia~\"Nacionalidad\",\n              condicion~\"Condición de Egreso\")) %&gt;% \n  add_overall() %&gt;% \n  modify_caption(\"**Tabla 3. Distribución de casos según características**\") %&gt;% \n  bold_labels()\n\ntabla_03\n\n\n\n\n\nTabla 3. Distribución de casos según características\n\n\n\n\n\n\n\n\nCaracterística\nGlobal\nN = 16,6101\nFemenino\nN = 8,4771\nMasculino\nN = 8,1331\n\n\n\n\nGrupo de edad en años\n\n\n\n\n\n\n\n\n    &lt;1\n2 (&lt;0.1%)\n2 (&lt;0.1%)\n0 (0%)\n\n\n    1_4\n92 (0.6%)\n39 (0.5%)\n53 (0.7%)\n\n\n    10_19\n731 (4.4%)\n491 (5.8%)\n240 (3.0%)\n\n\n    20_29\n4,575 (28%)\n2,617 (31%)\n1,958 (24%)\n\n\n    30_39\n4,618 (28%)\n2,358 (28%)\n2,260 (28%)\n\n\n    40_49\n3,417 (21%)\n1,612 (19%)\n1,805 (22%)\n\n\n    5_9\n46 (0.3%)\n25 (0.3%)\n21 (0.3%)\n\n\n    50_59\n1,948 (12%)\n842 (9.9%)\n1,106 (14%)\n\n\n    60 o más\n1,181 (7.1%)\n491 (5.8%)\n690 (8.5%)\n\n\nEdad en años\n35 (27, 46)\n34 (26, 44)\n37 (28, 48)\n\n\nNacionalidad\n\n\n\n\n\n\n\n\n    Dominicana\n13,588 (82%)\n6,724 (79%)\n6,864 (84%)\n\n\n    Haitiana\n2,940 (18%)\n1,738 (21%)\n1,202 (15%)\n\n\n    Otra Nacionalidad\n82 (0.5%)\n15 (0.2%)\n67 (0.8%)\n\n\nCondición de Egreso\n\n\n\n\n\n\n\n\n    Muerto\n76 (0.5%)\n24 (0.3%)\n52 (0.6%)\n\n\n    Vivo\n16,534 (100%)\n8,453 (100%)\n8,081 (99%)\n\n\n\n1 n (%); Mediana (Q1, Q3)\n\n\n\n\n\n\n\n\nEn este ejercicio anterior tuvimos que ajustar el país de procedencia o nacionalidad con la finalidad de hacer la tabla más presentable, de nuevo vamos a usar la función case_when() del paquete de tidyverse para re-codificar las categoría en base a los valores originales (los números en variables de texto se organizan de forma diferente). Otro cambio que podemos hacer usando esta función es el grupo de edad (grupo_edad) donde podemos ver que hay una categoría que no sale en orden (5_9a) para corregir esto como funciona case_when es valor actual (grupo_edad==“5_9”) seguido de una virgulilla (~) y el nuevo valor (sugerencia: “05_09”) y para el último valor ya sea mantener el resto de los valores se usa TRUE ~ nombre de la variable :\n\ntable_edad_reco &lt;- base_arreglada %&gt;% \n  mutate(grupo_edad=case_when(grupo_edad==\"1_4\"~\"01_04\",\n                              grupo_edad==\"5_9\"~\"05_09\",\n                              TRUE~grupo_edad)) %&gt;% \n  select(grupo_edad, sexo) %&gt;% \ntbl_summary(by=sexo)\n\ntable_edad_reco\n\nAhora con esta mismo resumen que usamos para la tabla anterior, vamos a hacer un gráfico de grupos de edades por sexo, que usamos de forma común para describir la población de cualquier evento. Continuando un poco con ggplot\n\n\n\nAnatomía de la función de ggplot\n\n\nTambién aparte de lo presentado en la imagen anterior hay otras funciones complementarias (scale_) que ayudan al ajuste del gráfico, pero como sea, solo vamos a enfocarnos en lo básico.\nEl el gráfico que hicimos de tiempo, solo presentamos una variable, en este ejemplo vamos a presentar una variable con dos o más categorías para mostrar una funcionalidad muy importante de la función de ggplot.\n\n#primero hacemos una tabla resumen con solo grupo edad y sexo\ngrafico_edad_reco &lt;- base_arreglada %&gt;% \n  mutate(grupo_edad=case_when(grupo_edad==\"1_4\"~\"01_04\",\n                              grupo_edad==\"5_9\"~\"05_09\",\n                              TRUE~grupo_edad)) %&gt;% \n  select(grupo_edad, sexo) %&gt;%\n  group_by(grupo_edad, sexo) %&gt;%  #agrupamos por estas dos variables\n  count() %&gt;%  #realizamos una cuenta de estas dos variables, el resultado es un dataframe con 3 variables (grupo_edad, sexo y n o cuenta)\n  ggplot(aes(x=grupo_edad, y=n, fill=sexo))+ # como estamos conectando el resumen con la función de ggplot, no necesitamos especificar el parametro data= o fuente de datos\ngeom_col()\n\n#veamos el gráfico \ngrafico_edad_reco\n\n\n\n\n\n\n\n\nAl igual con el ejemplo anterior, antes de usar este gráfico para presentar podemos hacer cambios, ejemplo, las barras que representa cada sexo por separado, el color de relleno también.\n\ngrafico_edad_reco &lt;- base_arreglada %&gt;% \n  mutate(grupo_edad=case_when(grupo_edad==\"1_4\"~\"01_04\",\n                              grupo_edad==\"5_9\"~\"05_09\",\n                              TRUE~grupo_edad)) %&gt;% \n  select(grupo_edad, sexo) %&gt;%\n  group_by(grupo_edad, sexo) %&gt;% \n  count() %&gt;%  \n  ggplot(aes(x=grupo_edad, \n             y=n, \n             fill=sexo))+ #fill es relleno, \ngeom_col(color=\"black\",     #agregamos color al borde\n         position = \"dodge\")+ #especificamos que la variable sexo será en columnas separadas, no apiladas\nscale_fill_manual(values=c(\"Femenino\"=\"white\",\n                           \"Masculino\"=\"grey\"))+#con esta función de ayuda podemos manualmente cambiar los colores de relleno, con el parametro values=creamos un vector con las categorias y le asignamos un color.\ntheme_minimal() #este es un tema (theme) que trae ggplot, hay paquetes que tienen temas mucho más acabado, \ngrafico_edad_reco\n\n\n\n\n\n\n\n\nTodavía hay muchos elementos que cambiar pero te dejo de tarea que busques lo siguiente:\n\n¿Cómo agregar un separador de miles al número del eje y?\n¿Cómo cambiar los títulos de los ejes y agregar título del gráfico?. (ver ejemplo del análisis de tiempo)\n¿Cómo puedo cambiar los colores del relleno de las barras?. ¿Cómo puedo remover o agregar las líneas guía en el fondo del gráfico?\n\nLa idea es que puedas también ir desarrollando la habilidad de usar las referencias que están disponible. Realmente no debes de aprenderte todos los comandos y funciones, lo que debes de tomar siempre en cuenta es definir bien que es lo que necesitas o quieres para luego tratar de procesarlo, esto lo mencioné al inicio de este manual.\nAhora que tenemos algunos elementos para comenzar un análisis descriptivo podemos comenzar a trabajar como ponerlos en un mismo documento usando rmarkdown.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Análisis de datos usando R</span>"
    ]
  },
  {
    "objectID": "06-analisisresultados.html#evaluando-si-existe-relación-entre-la-variable-dependiente-e-independiente",
    "href": "06-analisisresultados.html#evaluando-si-existe-relación-entre-la-variable-dependiente-e-independiente",
    "title": "7  Análisis de datos usando R",
    "section": "7.5 Evaluando si existe relación entre la variable dependiente e independiente",
    "text": "7.5 Evaluando si existe relación entre la variable dependiente e independiente\nEn este ejercicio en los pasos anteriores pudimos hacer un poco de analisis exploratorio, descriptivo, ahora brevemente vamos a realizar un análisis de estadística inferencial usando regresión lineal. Para esto bien sabes que la regresión lineal es un método aplicable en muchas situaciones en las que se estudia la relación entre dos o más variables o predecir un comportamiento, y para esto vamos a usar dos variables que sean continuas.\nVamos a evaluar si existe relación entre el año de ocurrencia de casos y la cantidad de casos y tambien predecir la cantidad de casos para años futuros, para esto tenemos que hacer una transformación de los datos. Primero vamos a crear un nuevo dataframe o una tabla resumen a partir del dataframe de la base arreglada:\n\ncasos_por_ann &lt;- base_arreglada %&gt;% #nueva tabla\n  group_by(ano_atencion) %&gt;%        #agrupamos por año del caso\n  count()                           #hacemos un conteo de casos (cada fila) por año\n\n\ncasos_por_ann\n\n# A tibble: 5 × 2\n# Groups:   ano_atencion [5]\n  ano_atencion     n\n         &lt;dbl&gt; &lt;int&gt;\n1         2017  4056\n2         2018  4825\n3         2019  5366\n4         2020  5040\n5         2021  6209\n\n\nComo podemos ver tenemos una nueva tabla que tiene dos columnas, la de los años (ano_atencion o variable independiente) y la del total de casos (n o variable dependiente). Ahora vamos a construir un nuevo objeto que tendrá el resumen del análisis de la regresión lineal, para esto vamos a usar la función lm() del paquete {base} de R. Los argumentos para esta formula son la base de datos, la variable independiente seguida del simbolo “~” o virgulilla y luego las variables independientes, cada una separada por el simbolo “+” en caso de ser más de una variable independiente. Luego de crear el objeto de regresión lineal o lm, para ver los resultados usamos la función summary() para ver los resultados con más detalles del modelo de regresión.\n\nmodelo_reg_lin &lt;- lm(data=casos_por_ann, n~ano_atencion) \n\nsummary(modelo_reg_lin)\n\n\nCall:\nlm(formula = n ~ ano_atencion, data = casos_por_ann)\n\nResiduals:\n     1      2      3      4      5 \n-139.0  177.9  266.8 -511.3  205.6 \n\nCoefficients:\n              Estimate Std. Error t value Pr(&gt;|t|)  \n(Intercept)  -907690.7   240549.5  -3.773   0.0326 *\nano_atencion     452.1      119.1   3.795   0.0321 *\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 376.8 on 3 degrees of freedom\nMultiple R-squared:  0.8276,    Adjusted R-squared:  0.7701 \nF-statistic:  14.4 on 1 and 3 DF,  p-value: 0.03212\n\n\nSegún la salida que nos muestra la consola tenemos que por cada año que pasa, la variable dependiente (casos) aumenta en 452.1 casos y el valor de R al cuadrado (coeficiente de correlación) es de 0.770102 que significa que el 77% de la variable dependiente se puede explicar por la variable independiente. Verifica el valor de p, este al parecer es menor de 0.05, lo que si hubiesemos planteado una hipótesis nula (no hay relación entre ambas variables) podemos rechazarla y quedarnos con la hipótesis alterna (hay relación significativa entre ambas variables).\nSupongamos que ahora quisieramos saber en los años posteriores a los que tenemos en la base resumen de los casos por año, digamos que en los próximos 5 años, como se comportarian los casos reportados, pudieramos usar la función predict() de {base}. Primero vamos a crear un nuevo dataframe con los años futuros y luego vamosa usar el modelo de regresión lineal y le pasamos este nuevo dataframe, así:\n\n#nuevo dataframe (5 años)\n\nann_futuros &lt;- data.frame(ano_atencion=c(2022:2026))\n\n# prediccion\n\nprediccion &lt;- predict(modelo_reg_lin, ann_futuros)\n\nnames(prediccion) &lt;- ann_futuros$ano_atencion #para agregar el nombre o el año\n\nprediccion\n\n  2022   2023   2024   2025   2026 \n6455.5 6907.6 7359.7 7811.8 8263.9 \n\n\nSi queremos agregar las predicciones al dataframe resumen de los años y casos, debemos convertir el vector prediccion en dataframe (usando la función data.frame) y luego unirlo al dataframe resumen.\n\npred_df &lt;- data.frame(prediccion) %&gt;% \n  rownames_to_column() %&gt;%  #aplicamos la función rownames_to_columns para agregar la columna de años\n  rename(ano_atencion=1, n=2) %&gt;%  #corregimos los nombres (importante antes de unir las tablas)\n  mutate(ano_atencion=as.numeric(ano_atencion)) #convertimos a tipo numerico la columna de años\n\nnuevo_df &lt;- casos_por_ann %&gt;%  #la base original\n  bind_rows(pred_df) #unimos la base nueva con las predicciones\n\nnuevo_df\n\n# A tibble: 10 × 2\n# Groups:   ano_atencion [10]\n   ano_atencion     n\n          &lt;dbl&gt; &lt;dbl&gt;\n 1         2017 4056 \n 2         2018 4825 \n 3         2019 5366 \n 4         2020 5040 \n 5         2021 6209 \n 6         2022 6456.\n 7         2023 6908.\n 8         2024 7360.\n 9         2025 7812.\n10         2026 8264.\n\n\nEsta es una muestra de como podemos hacer un análisis de estadistica inferencial. Hay muchos otros que podemos hacer, te recomiendo que revises los temas que te interesan dominar sobre analisis estadístico y busca como puedes llevarlos a cabo usando R, vas a encontrar una gran cantidad de ejemplos. Este que vimos es un solo abordaje, y depndiendo de tus objetivos puede aplicar otros.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Análisis de datos usando R</span>"
    ]
  }
]